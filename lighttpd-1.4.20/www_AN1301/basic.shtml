
<!-- Copyright 2011, MediaTek Inc. All Rights Reserved. -->
<html>
<head>
<meta http-equiv="Pragma" content="no-cache">
<meta http-equiv="Expires" content="-1">
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<link rel="stylesheet" href="/style/normal_ws.css" type="text/css">
<title>无线基础设置</title>
</head>

<script type="text/javascript" src="/shareFun.js"></script>
<script language="JavaScript" type="text/javascript">
var submit_buttons = ["radioButton", "WiFiButton", "basicApply", "basicCancel"];
var SSID = new Array();
var defaultShownMBSSID = "<!--#exec cmd="web 2860 nvram CurrentSSIDIndx"-->";
var HTBWValidSSIDIndex = -1; // For driver workaround
var VHTBWValidSSIDIndex = -1; // For driver workaround
var mssidb = "1";
var PhyModeList  = new Array();
var HiddenSSID  = "<!--#exec cmd="web 2860 nvram HideSSID"-->";
var APIsolated = "<!--#exec cmd="web 2860 nvram NoForwarding"-->";
var mbssidapisolated = "<!--#exec cmd="web 2860 nvram NoForwardingBTNBSSID"-->";
var ChIdxList  = new Array();
var fxtxmode = "HT";
var CntyCd = "CN";
var ht_mode = "0";
var ht_bw = "<!--#exec cmd="web 2860 nvram HT_BW"-->";
var ht_gi = "1";
var ht_stbc = "1";
var ht_mcs = "33";
var ht_htc = "1";
var ht_rdg = "0";
var ht_extcha = "0";
var ht_extcha_list = new Array();
var ht_amsdu = "0";
var ht_autoba = "1";
var ht_badecline = "0";
var ht_disallow_tkip = "1";
var ht_2040_coexit = "<!--#exec cmd="web 2860 nvram HT_BSSCoexistence"-->";
//var ht_f_40mhz = "0";
var ht_ldpc = "0";
var vht_bw = "";
var vht_2ndch = "";
var vht_stbc = "";
var vht_sgi = "";
var vht_bw_signal = "";
var vht_ldpc = "";
var tx_stream_idx = "2";
var rx_stream_idx = "2";
var apcli_include = "0";
var draft3b = "1";
var mesh_include = "0";
var txrxStream = "2";
var max_bssid_num = 1*"8";
var BssidNum = 1*"1";
var AC = "0";
var dbdcb = "0";
var mprofileb = "0";
var dbdc_ra0_5Gb = "0";
var dbdc_mode = "";
var mt_mac = "1"
var mssid16b = "0";

var SSID = new Array();
var PreAuth = new Array();
var AuthMode = new Array();
var EncrypType = new Array();
var DefaultKeyID = new Array();
var Key1Type = new Array();
var Key1Str = new Array();
var Key2Type = new Array();
var Key2Str = new Array();
var Key3Type = new Array();
var Key3Str = new Array();
var Key4Type = new Array();
var Key4Str = new Array();
var WPAPSK = new Array();
var RekeyInterval = new Array();
var PMKCachePeriod = new Array();
var wpsenable = "0";
var wpa_support = 0;

ChLst_24G = new Array(14);
ChLst_24G[0] = "2412MHz (Channel 1)";
ChLst_24G[1] = "2417MHz (Channel 2)";
ChLst_24G[2] = "2422MHz (Channel 3)";
ChLst_24G[3] = "2427MHz (Channel 4)";
ChLst_24G[4] = "2432MHz (Channel 5)";
ChLst_24G[5] = "2437MHz (Channel 6)";
ChLst_24G[6] = "2442MHz (Channel 7)";
ChLst_24G[7] = "2447MHz (Channel 8)";
ChLst_24G[8] = "2452MHz (Channel 9)";
ChLst_24G[9] = "2457MHz (Channel 10)";
ChLst_24G[10] = "2462MHz (Channel 11)";
ChLst_24G[11] = "2467MHz (Channel 12)";
ChLst_24G[12] = "2472MHz (Channel 13)";
ChLst_24G[13] = "2484MHz (Channel 14)";

ChLst_5G = new Array(33);
ChLst_5G[0] = "5180MHz (Channel 36)";
ChLst_5G[1] = "5200MHz (Channel 40)";
ChLst_5G[2] = "5220MHz (Channel 44)";
ChLst_5G[3] = "5240MHz (Channel 48)";
ChLst_5G[4] = "5260MHz (Channel 52)";
ChLst_5G[5] = "5280MHz (Channel 56)";
ChLst_5G[6] = "5300MHz (Channel 60)";
ChLst_5G[7] = "5320MHz (Channel 64)";
ChLst_5G[16] = "5500MHz (Channel 100)";
ChLst_5G[17] = "5520MHz (Channel 104)";
ChLst_5G[18] = "5540MHz (Channel 108)";
ChLst_5G[19] = "5560MHz (Channel 112)";
ChLst_5G[20] = "5580MHz (Channel 116)";
ChLst_5G[21] = "5600MHz (Channel 120)";
ChLst_5G[22] = "5620MHz (Channel 124)";
ChLst_5G[23] = "5640MHz (Channel 128)";
ChLst_5G[24] = "5660MHz (Channel 132)";
ChLst_5G[25] = "5680MHz (Channel 136)";
ChLst_5G[26] = "5700MHz (Channel 140)";
ChLst_5G[28] = "5745MHz (Channel 149)";
ChLst_5G[29] = "5765MHz (Channel 153)";
ChLst_5G[30] = "5785MHz (Channel 157)";
ChLst_5G[31] = "5805MHz (Channel 161)";
ChLst_5G[32] = "5825MHz (Channel 165)";

HT5GExtCh = new Array(22);
HT5GExtCh[0] = new Array(1, "5200MHz (Channel 40)"); //36's extension channel
HT5GExtCh[1] = new Array(0, "5180MHz (Channel 36)"); //40's extension channel
HT5GExtCh[2] = new Array(1, "5240MHz (Channel 48)"); //44's
HT5GExtCh[3] = new Array(0, "5220MHz (Channel 44)"); //48's
HT5GExtCh[4] = new Array(1, "5280MHz (Channel 56)"); //52's
HT5GExtCh[5] = new Array(0, "5260MHz (Channel 52)"); //56's
HT5GExtCh[6] = new Array(1, "5320MHz (Channel 64)"); //60's
HT5GExtCh[7] = new Array(0, "5300MHz (Channel 60)"); //64's
HT5GExtCh[8] = new Array(1, "5520MHz (Channel 104)"); //100's
HT5GExtCh[9] = new Array(0, "5500MHz (Channel 100)"); //104's
HT5GExtCh[10] = new Array(1, "5560MHz (Channel 112)"); //108's
HT5GExtCh[11] = new Array(0, "5540MHz (Channel 108)"); //112's
HT5GExtCh[12] = new Array(1, "5600MHz (Channel 120)"); //116's
HT5GExtCh[13] = new Array(0, "5580MHz (Channel 116)"); //120's
HT5GExtCh[14] = new Array(1, "5640MHz (Channel 128)"); //124's
HT5GExtCh[15] = new Array(0, "5620MHz (Channel 124)"); //128's
HT5GExtCh[16] = new Array(1, "5680MHz (Channel 136)"); //132's
HT5GExtCh[17] = new Array(0, "5660MHz (Channel 132)"); //136's
HT5GExtCh[18] = new Array(1, "5765MHz (Channel 153)"); //149's
HT5GExtCh[19] = new Array(0, "5745MHz (Channel 149)"); //153's
HT5GExtCh[20] = new Array(1, "5805MHz (Channel 161)"); //157's
HT5GExtCh[21] = new Array(0, "5785MHz (Channel 157)"); //161's

function getConfirmation()
{
   var retVal = confirm("WPS will be disabled!!");
   if( retVal == true ){
	  //document.write ("User wants to continue!");
	  return true;
   } else{
	  //document.write ("User does not want to continue!");
	  return false;
   }
}

function showCountryCodeWarnning(country_code, channel, wmode_str)
{
alert("11" + wmode_str + "的信道在" + country_code + "不合法" + ".\n" + "无线仍然工作在不合法的信道" + channel + ". 请选则合法的信道");
}

function is_gband(wmode)
{
	if(wmode == 0)
		return 1;
	else if (wmode == 1)
		return 1;
	else if (wmode == 4)
		return 1;
	else if (wmode == 6)
		return 1;
	else if (wmode == 7)
		return 1;
	else if (wmode == 9)
		return 1;
	else
		return 0;
}

function dbdc_driver_workaround(init_step, runtime)
{
	var dbdc_enabled = document.wireless_basic.DBDCEnabled[0].checked;

	if ((!dbdc_enabled) || (mprofileb =="1"))
		return;

	if (init_step)
	{
		FindHTBWValidSSIDIndex(PhyModeList, -1);
		FindVHTBWValidSSIDIndex(PhyModeList, -1);
	}

	if (runtime)
	{
		setDBDC_HTBW();
		setDBDC_VHTBW();
	}
}

function dbdc_driver_vhtbw_workaround()
{
	var wmode = document.wireless_basic.wirelessmode.value;
	var ht_bw = document.wireless_basic.n_bandwidth.value; //current setting
	//var vht_bw = ""; //orig setting
	var ssidid = document.wireless_basic.ssidIndex.value;

	if (mprofileb =="1")
		return;

	// Prevent problem that HT_BW=0 is set by small index of non-AC SSID, vht_bw is still > 0.
	if (wmode < 12)	//non-AC
	{
		if ((ssidid == HTBWValidSSIDIndex) && (ht_bw == 0))
		{
			//alert("Change VHT Bandwidth to 20/40.");
			document.wireless_basic.vht_bandwidth.disabled = false;
			document.wireless_basic.vht_bandwidth[0].disabled = false;
			document.wireless_basic.vht_bandwidth[0].checked = true;
		}
	}
}

function dbdc_prevent_outbound_value()
{
	var dbdc_enabled = document.wireless_basic.DBDCEnabled[0].checked;
	var wmode = document.wireless_basic.wirelessmode.value;
	var vht_bw = ""; //orig setting

	if ((!dbdc_enabled) || (mprofileb =="1"))
		return;

	if (wmode < 12)	//non-AC
	{
		if (vht_bw > 1)
		{
			document.wireless_basic.vht_bandwidth.disabled = false;
			document.wireless_basic.vht_bandwidth[0].disabled = false;
			document.wireless_basic.vht_bandwidth[1].disabled = false;
			document.wireless_basic.vht_bandwidth[1].checked = true;
		}

	}

	dbdc_driver_vhtbw_workaround();

	if (document.wireless_basic.tx_stream.value > 2)
	{
		document.wireless_basic.tx_stream.selectedIndex = 1;
	}

	if (document.wireless_basic.rx_stream.value > 2)
	{
		document.wireless_basic.rx_stream.selectedIndex = 1;
	}
}

// Must be called only when DBDC_MODE changed.
function OnDBDCChanged()
{
	var wmode = document.wireless_basic.wirelessmode.value;
	var dbdc_enabled =  document.wireless_basic.DBDCEnabled[0].checked;
	var ssid1 = document.wireless_basic.mssid_1;

	// ssidIndex > 0 &&
	// 1.  dbdc_enable to !dbdc_enabled => Run this case
	// 2. !dbdc_enable to !dbdc_enabled => Should not happened! Run this case to handle exception.
	if(document.wireless_basic.ssidIndex.value != "0")
	{
		initSSIDList();
		UpdateMBSSIDList();

		document.wireless_basic.ssidIndex.selectedIndex = 0;
		LoadFields(0);
	}
	else
	{
		if ((document.wireless_basic.DBDCEnabled[0].checked) && (dbdc_mode != "1")) {
			if ((mprofileb == "1") && (dbdc_ra0_5Gb == "1"))
				alert("当Wi-Fi驱动程序被配置为使用DBDC Multi-Profile和ra0默认5G时，首次打开DBDC时，当前设置将应用于2.4G接口rax0。\n");
			else
				alert("1.如果SSID更改而不保存，请在进行其他设置之前保存。\ n2.请注意配置所有新的DBDC SSID，否则将在通道6设置为b / g / n模式");
		} else {
			alert("如果SSID更改而不保存，请在进行其他设置之前保存");
		}
		// !dbdc_enabled to dbdc_enabled.
		// ssidIndex.value must be "0" if !dbdc_enabled flow runs well.
		// So do required change only.
		initSSIDList();
		UpdateMBSSIDList();
		changeHTStream(wmode);
		changeMCSoptions(wmode);
		changeHTBW();
		changeVHTBW();
		create2ndVHTChannel(document.wireless_basic.sz11aChannel.value);
		// SSIDList is changed
		dbdc_driver_workaround(1,1);
	}
}

//Must be called when get new NVRAM value.
function FindHTBWValidSSIDIndex(wirelessModeList, exceptId)
{
	HTBWValidSSIDIndex = -1;
	for (var i = 0; i < wirelessModeList.length; i++)
	{
		wirelessModeList[i] = 1*wirelessModeList[i];
		if((wirelessModeList[i] > 4) && (wirelessModeList[i] <= 15) && (i != exceptId))
		{
			HTBWValidSSIDIndex = i;
			break;
		}
	}
}

//Must be called when get new NVRAM value.
function FindVHTBWValidSSIDIndex(wirelessModeList, exceptId)
{
	VHTBWValidSSIDIndex = -1;
	for (var i = 0; i < wirelessModeList.length; i++)
	{
		wirelessModeList[i] = 1*wirelessModeList[i];
		if((wirelessModeList[i] >= 14) && (wirelessModeList[i] <= 15) && (i != exceptId))
		{
			VHTBWValidSSIDIndex = i;
			break;
		}
	}
}

//Must be called after FindHTBWValidSSIDIndex().
function setDBDC_HTBW()
{
	var ssidid = document.wireless_basic.ssidIndex.value;
	var wmode = document.wireless_basic.wirelessmode.options[document.wireless_basic.wirelessmode.selectedIndex].value;

	if (ssidid == HTBWValidSSIDIndex)
	{
		if((wmode > 4) && (wmode <=15))
		{
			// Initial or change N/AC to N/AC mode
			document.wireless_basic.n_bandwidth[0].disabled = false;
			document.wireless_basic.n_bandwidth[1].disabled = false;
			//document.wireless_basic.n_extcha.disabled = false;
		}
		else
		{
			// change from N/AC to non-N/AC mode, try to find new SSID which can set HT_BW.
			// PhyModeList is read from NVRAM, ssidid's PhyMode in PhyModeList is
			// still N/AC mode, so prevent to choose ssidid again.
			// However, this UI can only change setting of one SSID at once, so this step is
			// not required actually.
			FindHTBWValidSSIDIndex(PhyModeList, ssidid);
		}
	}
	else
	{
		// It happens when ssidid is changed from non-N/AC mode to N mode at runtime.
		// By the rules:
		// 1. First SSID of N/AC mode is allowed to set HT_BW.
		// 2. UI only can change setting of one SSID at once.
		// So turn on HT_BW setting temperally, and not change HTBWValidSSIDIndex.
		if((wmode > 4) && (wmode <=15) && ((HTBWValidSSIDIndex == -1) || (ssidid < HTBWValidSSIDIndex)))
		{
			document.wireless_basic.n_bandwidth[0].disabled = false;
			document.wireless_basic.n_bandwidth[1].disabled = false;
			//document.wireless_basic.n_extcha.disabled = false;
		}
		else
		{
			// Initial or change non-N/AC to non-N/AC mode
			document.wireless_basic.n_bandwidth[0].disabled = true;
			document.wireless_basic.n_bandwidth[1].disabled = true;
			//document.wireless_basic.n_extcha.disabled = true;
		}
	}
}

//Must be called after FindVHTBWValidSSIDIndex().
function setDBDC_VHTBW()
{
	var ssidid = document.wireless_basic.ssidIndex.value;
	var wmode = document.wireless_basic.wirelessmode.options[document.wireless_basic.wirelessmode.selectedIndex].value;

	if (ssidid == VHTBWValidSSIDIndex)
	{
		if((wmode >= 14) && (wmode <=15))
		{
			// Initial or change AC to AC mode
			document.wireless_basic.vht_bandwidth[0].disabled = false;
			document.wireless_basic.vht_bandwidth[1].disabled = false;
		}
		else
		{
			// change from N/AC to non-N/AC mode, try to find new SSID which can set HT_BW.
			// PhyModeList is read from NVRAM, ssidid's PhyMode in PhyModeList is
			// still N/AC mode, so prevent to choose ssidid again.
			// However, this UI can only change setting of one SSID at once, so this step is
			// not required actually.
			FindVHTBWValidSSIDIndex(PhyModeList, ssidid);
		}
	}
	else
	{
		// It happens when ssidid is changed from non-AC mode to AC mode at runtime.
		// By the rules:
		// 1. First SSID of AC mode is allowed to set VHT_BW.
		// 2. UI only can change setting of one SSID at once.
		// So turn on VHT_BW setting temperally, and not change VHTBWValidSSIDIndex.
		if((wmode >= 14) && (wmode <=15) && ((VHTBWValidSSIDIndex == -1) || (ssidid < VHTBWValidSSIDIndex)))
		{
			document.wireless_basic.vht_bandwidth[0].disabled = false;
			document.wireless_basic.vht_bandwidth[1].disabled = false;
		}
		else
		{
			// Initial or change non-N/AC to non-N/AC mode
			document.wireless_basic.vht_bandwidth[0].disabled = true;
			document.wireless_basic.vht_bandwidth[1].disabled = true;
		}
	}
}

function changeHTStream(wmode)
{
	var stream = document.wireless_basic.tx_stream.length;
	var x = document.getElementById("tx_stream");
	var y = document.getElementById("rx_stream");
	var dbdc_enabled =  document.wireless_basic.DBDCEnabled[0].checked;

	for (i=stream; i>1;i--)
	{
		x.remove(i-1);
		y.remove(i-1);
	}

	stream = document.wireless_basic.tx_stream.length;
	if (txrxStream > 1)
	{
		document.wireless_basic.rx_stream.options[1] = new Option("2", "2");
		document.wireless_basic.tx_stream.options[1] = new Option("2", "2");
		stream++;
	}
	if ((txrxStream > 2) && (!dbdc_enabled))
	{
		document.wireless_basic.rx_stream.options[2] = new Option("3", "3");
		document.wireless_basic.tx_stream.options[2] = new Option("3", "3");
		stream++;
	}
	if ((txrxStream > 3) && (!dbdc_enabled))
	{
		document.wireless_basic.rx_stream.options[3] = new Option("4", "4");
		document.wireless_basic.tx_stream.options[3] = new Option("4", "4");
		stream++;
	}
	if (txrxStream == "1")
	{
		tx_stream_idx = 1;
		rx_stream_idx = 1;
	}

	if (stream > rx_stream_idx)
		document.wireless_basic.rx_stream.selectedIndex = rx_stream_idx - 1;
	else
		document.wireless_basic.rx_stream.selectedIndex = stream - 1;
	if (stream > tx_stream_idx)
		document.wireless_basic.tx_stream.selectedIndex = tx_stream_idx - 1;
	else
		document.wireless_basic.tx_stream.selectedIndex = stream - 1;
}

function changeMCSoptions(wmode)
{
	var w_mode = document.wireless_basic.wirelessmode.options[document.wireless_basic.wirelessmode.selectedIndex].value;
	var mcs_len = document.wireless_basic.n_mcs.length;
	var x = document.getElementById("n_mcs");
	for (i=mcs_len; i>8;i--)
	{
		x.remove(i-1);
	}
	mcs_len = document.wireless_basic.n_mcs.length;
	if (w_mode != "14" && w_mode != "15")
	{
		if (document.wireless_basic.tx_stream.selectedIndex > 0)
		{
			for (i = 8; i < 16; i++)
			{
				document.wireless_basic.n_mcs.options[i] = new Option(i, i);
				mcs_len++;
			}
			if (1*txrxStream == 3)
			{
				for (i = 16; i < 24; i++)
				{
					document.wireless_basic.n_mcs.options[i] = new Option(i, i);
					mcs_len++;
				}
			}
		}
		if (document.wireless_basic.n_bandwidth[1].checked == true)
		{
			document.wireless_basic.n_mcs.options[mcs_len] = new Option("32", "32");
			mcs_len++;
		}
	}
	else
	{
		document.wireless_basic.n_mcs.options[mcs_len] = new Option(8, 8);
		mcs_len++;
		document.wireless_basic.n_mcs.options[mcs_len] = new Option(9, 9);
		mcs_len++;
	}
	document.wireless_basic.n_mcs.options[mcs_len] = new Option("Auto", "33");
	mcs_len++;
	var ht_mcs_nm = 1*ht_mcs.split(";", 1);
	if (ht_mcs_nm <= 23)
		document.wireless_basic.n_mcs.selectedIndex = ht_mcs_nm;
	else if ((ht_mcs_nm == 32) && (document.wireless_basic.n_bandwidth[1].checked == true))
		document.wireless_basic.n_mcs.selectedIndex = mcs_len-2;
	else
		document.wireless_basic.n_mcs.selectedIndex = mcs_len-1;
}

function changeTxStream()
{
	var txStream = document.wireless_basic.tx_stream.value;

	changeMCSoptions(document.wireless_basic.wirelessmode.selectedIndex);
	changeVHTBW();
}

function CreateExtChOpt(vChannel)
{
	var y = document.createElement('option');

	y.text = ChLst_24G[1*vChannel - 1];
//	y.value = 1*vChannel;
	y.value = 1;

	var x = document.getElementById("n_extcha");

	try
	{
		x.add(y,null); // standards compliant
	}
	catch(ex)
	{
		x.add(y); // IE only
	}
}

function InsExtChOpt()
{
	var OptLen;
	var CurrCh;
	var wmode = document.wireless_basic.wirelessmode.options[document.wireless_basic.wirelessmode.selectedIndex].value;

	if ((1*wmode == 9) || (1*wmode == 8) || (1*wmode == 6) || (1*wmode == 11) || (1*wmode >= 14))
	{
		var x = document.getElementById("n_extcha");
		var length = document.wireless_basic.n_extcha.options.length;

		if (length > 1)
		{
			x.selectedIndex = 1;
			x.remove(x.selectedIndex);
		}

		if ((1*wmode == 8) || (1*wmode == 11) || (1*wmode >= 14))
		{
			CurrCh = document.wireless_basic.sz11aChannel.value;

			if ((1*CurrCh >= 36) && (1*CurrCh <= 64))
			{
				CurrCh = 1*CurrCh;
				CurrCh /= 4;
				CurrCh -= 9;

				x.options[0].text = HT5GExtCh[CurrCh][1];
				x.options[0].value = HT5GExtCh[CurrCh][0];
			}
			else if ((1*CurrCh >= 100) && (1*CurrCh <= 136))
			{
				CurrCh = 1*CurrCh;
				CurrCh /= 4;
				CurrCh -= 17;

				x.options[0].text = HT5GExtCh[CurrCh][1];
				x.options[0].value = HT5GExtCh[CurrCh][0];
			}
			else if ((1*CurrCh >= 149) && (1*CurrCh <= 161))
			{
				CurrCh = 1*CurrCh;
				CurrCh -= 1;
				CurrCh /= 4;
				CurrCh -= 19;

				x.options[0].text = HT5GExtCh[CurrCh][1];
				x.options[0].value = HT5GExtCh[CurrCh][0];
			}
			else
			{
				x.options[0].text = "Auto Select";
				x.options[0].value = 0;
			}
		}
		else if ((1*wmode == 9) || (1*wmode == 6))
		{
			CurrCh = document.wireless_basic.sz11gChannel.value;
			OptLen = document.wireless_basic.sz11gChannel.options.length;

			if ((CurrCh >=1) && (CurrCh <= 4))
			{
				x.options[0].text = ChLst_24G[1*CurrCh + 4 - 1];
				x.options[0].value = 1;
			}
			else if ((CurrCh >= 5) && (CurrCh <= 7))
			{
				x.options[0].text = ChLst_24G[1*CurrCh - 4 - 1];
				x.options[0].value = 0; //1*CurrCh - 4;
				CurrCh = 1*CurrCh;
				CurrCh += 4;
				CreateExtChOpt(CurrCh);
			}
			else if ((CurrCh >= 8) && (CurrCh <= 9))
			{
				x.options[0].text = ChLst_24G[1*CurrCh - 4 - 1];
				x.options[0].value = 0; //1*CurrCh - 4;

				if (OptLen >=14)
				{
					CurrCh = 1*CurrCh;
					CurrCh += 4;
					CreateExtChOpt(CurrCh);
				}
			}
			else if (CurrCh == 10)
			{
				x.options[0].text = ChLst_24G[1*CurrCh - 4 - 1];
				x.options[0].value = 0; //1*CurrCh - 4;

				if (OptLen > 14)
				{
					CurrCh = 1*CurrCh;
					CurrCh += 4;
					CreateExtChOpt(CurrCh);
				}
			}
			else if (CurrCh >= 11)
			{
				x.options[0].text = ChLst_24G[1*CurrCh - 4 - 1];
				x.options[0].value = 0; //1*CurrCh - 4;
			}
			else
			{
				x.options[0].text = "Auto Select";
				x.options[0].value = 0;
			}
		}
	}
}

function create2ndVHTChannel(CurrCh)
{
	var len = document.wireless_basic.vht2nd11aChannel.length;
	var x = document.getElementById("vht2nd11aChannel");

	if ((document.wireless_basic.vht_bandwidth[3].checked == true) && (CurrCh != 0)){
		display("table-row", "div_vht_2nd_11a_channel");
		document.wireless_basic.vht2nd11aChannel.disabled = false;
	} else {
		display("none", "div_vht_2nd_11a_channel");
		document.wireless_basic.vht2nd11aChannel.disabled = true;
		return false;
	}

	while (len > 0)
		x.remove(--len);

	if ((CurrCh < 36 || CurrCh > 48) && (CurrCh != 52))
		document.wireless_basic.vht2nd11aChannel.options[len++] = new Option("36~48", "36");
	if ((CurrCh < 52 || CurrCh > 64) && (CurrCh != 36))
		document.wireless_basic.vht2nd11aChannel.options[len++] = new Option("52~64", "52");
	if (CurrCh < 100 || CurrCh > 112)
		document.wireless_basic.vht2nd11aChannel.options[len++] = new Option("100~112", "100");
	if ((CurrCh < 116 || CurrCh > 128) && (CurrCh != 100 && CurrCh != 132))
		document.wireless_basic.vht2nd11aChannel.options[len++] = new Option("116~128", "116");
	if (CurrCh < 132 || CurrCh > 144)
		document.wireless_basic.vht2nd11aChannel.options[len++] = new Option("132~144", "132");
	if (CurrCh < 149 || CurrCh > 161)
		document.wireless_basic.vht2nd11aChannel.options[len++] = new Option("149~161", "149");
	return true;
}

function SelectHtExtCha()
{
	var ssidid = document.wireless_basic.ssidIndex.value;
	var OptLen = document.wireless_basic.n_extcha.options.length;
	var value

	//console.log("SelectHtExtCha.ht_extcha_list[" + ssidid + "]=" + ht_extcha_list[ssidid]);

	if(ht_extcha_list[ssidid]){
		value = ht_extcha_list[ssidid];
	}else{
		value = 0;
	}

	if (1*value == 0){
		if (OptLen > 1)
			document.wireless_basic.n_extcha.options.selectedIndex = 0;
	}
	else if (1*value == 1){
		if (OptLen > 1)
			document.wireless_basic.n_extcha.options.selectedIndex = 1;
	}
	else{
		document.wireless_basic.n_extcha.options.selectedIndex = 0;
	}
}


function ChOnChange()
{
	var ret = confirm("如果适用于保存此更改，则相同频段中的所有BSSID的频道将被更改.\ n请确认此更改.");
	if(ret == false){
		ChannelSetting("restore");
		return;
	}


	if (document.wireless_basic.sz11gChannel.options.selectedIndex == 14) {
		document.wireless_basic.n_bandwidth[0].checked = true;
		document.wireless_basic.n_bandwidth[1].checked = false;
		document.wireless_basic.n_bandwidth[1].disabled = true;
		ChBwOnClick();
	} else {
		document.wireless_basic.n_bandwidth[1].disabled = false;
	}
	if (document.wireless_basic.n_bandwidth[1].checked == true)
	{
		var w_mode = document.wireless_basic.wirelessmode.options[document.wireless_basic.wirelessmode.selectedIndex].value;

		if ((1*w_mode == 8) || (1*w_mode == 11) || (1*w_mode >= 14))
		{
			if (document.wireless_basic.n_bandwidth[1].checked == true)
			{
				//var dbdc_enabled =  document.wireless_basic.DBDCEnabled[0].checked;
				//display("table-row", "div_extension_channel");
				//Do not effect HT_EXTCHA of g band of other SSID when DBDC enable.
				//if(dbdc_enabled)
				//	document.wireless_basic.n_extcha.disabled = true;
				//else
					document.wireless_basic.n_extcha.disabled = false;
			}

			if (document.wireless_basic.sz11aChannel.options.selectedIndex == 0)
			{
				display("none", "div_extension_channel");
				document.wireless_basic.n_extcha.disabled = true;
			}
		}
		else if ((1*w_mode == 3) || (1*w_mode == 4))
		{
			if (document.wireless_basic.vht_bandwidth[3].disabled == false &&
			    document.wireless_basic.n_bandwidth[1].checked == true)
			{
				//display("table-row", "div_extension_channel");
				document.wireless_basic.n_extcha.disabled = false;
			}

			if (document.wireless_basic.sz11gChannel.options.selectedIndex == 0)
			{
				display("none", "div_extension_channel");
				document.wireless_basic.n_extcha.disabled = true;
			}
		}
		else if ((1*w_mode == 6) || (1*w_mode == 9))
		{
			if (document.wireless_basic.n_bandwidth[1].checked == true)
			{
				//display("table-row", "div_extension_channel");
				document.wireless_basic.n_extcha.disabled = false;
			}

			if (document.wireless_basic.sz11gChannel.options.selectedIndex == 0)
			{
				display("none", "div_extension_channel");
				document.wireless_basic.n_extcha.disabled = true;
			}
		}
	}

	InsExtChOpt();
	SelectHtExtCha();

	create2ndVHTChannel(document.wireless_basic.sz11aChannel.value);

	dbdc_driver_workaround(0,1);
}

function changeVHTBW()
{
	var w_mode = document.wireless_basic.wirelessmode.options[document.wireless_basic.wirelessmode.selectedIndex].value;
	var dbdc_enabled =  document.wireless_basic.DBDCEnabled[0].checked;
	var txStream = document.wireless_basic.tx_stream.value;
	var vht_bw_160_en = 0;

	display("none", "div_vht_bw");
	document.wireless_basic.vht_bandwidth[0].disabled = true;
	document.wireless_basic.vht_bandwidth[1].disabled = true;
	document.wireless_basic.vht_bandwidth[2].disabled = true;
	document.wireless_basic.vht_bandwidth[3].disabled = true;
	if (1*w_mode >= 12 && document.wireless_basic.n_bandwidth[1].checked == true)
	{
		display("table-row", "div_vht_bw");
		document.wireless_basic.vht_bandwidth[0].disabled = false;
		document.wireless_basic.vht_bandwidth[1].disabled = false;
		if ((1*txrxStream == 4) && (!dbdc_enabled) && (1*txStream == 4)){
			document.wireless_basic.vht_bandwidth[2].disabled = false;
			document.wireless_basic.vht_bandwidth[3].disabled = false;
			vht_bw_160_en = 1;
		}
	}

	if ((vht_bw_160_en == 0) && ((document.wireless_basic.vht_bandwidth[2].checked) || (document.wireless_basic.vht_bandwidth[3].checked)))
	{
		document.wireless_basic.vht_bandwidth[1].checked = true;
	}
}

function changeHTBW()
{
	var w_mode = document.wireless_basic.wirelessmode.options[document.wireless_basic.wirelessmode.selectedIndex].value;
	var dbdc_enabled =  document.wireless_basic.DBDCEnabled[0].checked;

	if (document.wireless_basic.n_bandwidth[0].checked == true)
	{
		display("none", "div_extension_channel");
		document.wireless_basic.n_extcha.disabled = true;
	}
	else
	{
		//display("table-row", "div_extension_channel");
		document.wireless_basic.n_extcha.disabled = false;

		if ((1*w_mode == 8) || (1*w_mode == 11) || (1*w_mode >= 14))
		{
			if (document.wireless_basic.sz11aChannel.options.selectedIndex == 0)
			{
				display("none", "div_extension_channel");
				document.wireless_basic.n_extcha.disabled = true;
			} else {
				//Do not effect HT_EXTCHA of g band when DBDC is enabled.
				//if(dbdc_enabled)
				//{
				//	display("table-row", "div_extension_channel");
				//	document.wireless_basic.n_extcha.disabled = true;
				//}
				//else {
					//display("table-row", "div_extension_channel");
					document.wireless_basic.n_extcha.disabled = false;
				//}
			}
		}
	}
}

function ChBwOnClick()
{
	var w_mode = document.wireless_basic.wirelessmode.options[document.wireless_basic.wirelessmode.selectedIndex].value;
	var dbdc_enabled =  document.wireless_basic.DBDCEnabled[0].checked;
	var band_width = document.wireless_basic.n_bandwidth.value;

	if (document.wireless_basic.n_bandwidth[0].checked == true) {
		display("none", "div_extension_channel");
		document.wireless_basic.n_extcha.disabled = true;
	} else {
		//alert("如果需要固定无线工作在40M频宽，请选中20/40共存的\"关闭\"选项");
		//display("table-row", "div_extension_channel");
		document.wireless_basic.n_extcha.disabled = false;
		if ((1*w_mode == 8) || (1*w_mode == 11) || (1*w_mode >= 14)) {
			if (document.wireless_basic.sz11aChannel.options.selectedIndex == 0) {
				display("none", "div_extension_channel");
				document.wireless_basic.n_extcha.disabled = true;
			} else {
				//Do not effect HT_EXTCHA of g band when DBDC is enabled.
				//if(dbdc_enabled) {
				//	display("table-row", "div_extension_channel");
				//	document.wireless_basic.n_extcha.disabled = true;
				//}
				//else {
					//display("table-row", "div_extension_channel");
					document.wireless_basic.n_extcha.disabled = false;
				//}
			}
		}
	}
	
	// mapping 40Mhz to ht_2040_coexit and ht_bw
	if (band_width == 2) {
		document.wireless_basic.n_2040_coexit[0].checked = true;
	} else if (band_width == 1) {
		document.wireless_basic.n_2040_coexit[1].checked = true;
	}
	
	changeVHTBW();
	create2ndVHTChannel(document.wireless_basic.sz11aChannel.value);
	changeMCSoptions(w_mode);

	dbdc_driver_workaround(0,1);
}

function VHTBWonClick()
{
	changeVHTBW();
	create2ndVHTChannel(document.wireless_basic.sz11aChannel.value);
}

function initWirelessMode()
{
	var wmode_len = document.wireless_basic.wirelessmode.length;
	var Gband = "1";
	if (Gband == "1")
	{
		document.wireless_basic.wirelessmode.options[wmode_len] = new Option("11b/g 混合模式", "0");
                document.wireless_basic.wirelessmode.options[wmode_len+1] = new Option("仅11b", "1");
		document.wireless_basic.wirelessmode.options[wmode_len+2] = new Option("仅11g", "4");
                document.wireless_basic.wirelessmode.options[wmode_len+3] = new Option("11b/g/n混合", "9");
		wmode_len = document.wireless_basic.wirelessmode.length;
	}
	var Aband = "0";
	if (Aband == "1")
	{
		document.wireless_basic.wirelessmode.options[wmode_len] = new Option("仅11a", "2");
                document.wireless_basic.wirelessmode.options[wmode_len+1] = new Option("11a/n 混合模式", "8");
		wmode_len = document.wireless_basic.wirelessmode.length;
	}
	if (AC == "1")
	{
		document.wireless_basic.wirelessmode.options[wmode_len] = new Option("11vht AC/AN/A", "14");
		document.wireless_basic.wirelessmode.options[wmode_len+1] = new Option("11vht AC/AN", "15");
		wmode_len = document.wireless_basic.wirelessmode.length;
	}
}

function initSSIDList()
{
	var dbdc_enabled =  document.wireless_basic.DBDCEnabled[0].checked;

	if ((str = "CMCC-qx3d") != "")
	{
		SSID[0] = str;
	}

	//if((!dbdc_enabled) || (mprofileb == "1"))
	if((dbdc_enabled != "1") || (dbdcb != "1") || (mprofileb == "1"))
	{
		SSID.splice(1, SSID.length - 1);
		return;
	}

	if ((str = "") != "")
	{
		SSID[1] = str;
	}
	if ((str = "") != "")
	{
		SSID[2] = str;
	}
	if ((str = "") != "")
	{
		SSID[3] = str;
	}
	if ((str = "") != "")
	{
		SSID[4] = str;
	}
	if ((str = "") != "")
	{
		SSID[5] = str;
	}
	if ((str = "") != "")
	{
		SSID[6] = str;
	}
	if ((str = "") != "")
	{
		SSID[7] = str;
	}
	if ((str = "") != "")
	{
		SSID[8] = str;
	}
	if ((str = "") != "")
	{
		SSID[9] = str;
	}
	if ((str = "") != "")
	{
		SSID[10] = str;
	}
	if ((str = "") != "")
	{
		SSID[11] = str;
	}
	if ((str = "") != "")
	{
		SSID[12] = str;
	}
	if ((str = "") != "")
	{
		SSID[13] = str;
	}
	if ((str = "") != "")
	{
		SSID[14] = str;
	}
	if ((str = "") != "")
	{
		SSID[15] = str;
	}
}

function UpdateMBSSIDList()
{
	var dbdc_enabled =  document.wireless_basic.DBDCEnabled[0].checked;
//	var length = document.wireless_basic.ssidIndex.length;

	for (var i = document.wireless_basic.ssidIndex.length; i > 1; i--)
	{
		var res = document.wireless_basic.ssidIndex.remove(i-1);
	}
	document.wireless_basic.ssidIndex.length = 0;

	for(var i=0; i<SSID.length; i++){
		//var j = document.wireless_basic.ssidIndex.options.length;
		//document.wireless_basic.ssidIndex.options[j] = new Option(SSID[i], i, false, false);
		document.wireless_basic.ssidIndex.options[i] = new Option(SSID[i], i, false, false);
	}

	document.wireless_basic.ssidIndex.options.selectedIndex = defaultShownMBSSID;
	old_MBSSID = defaultShownMBSSID;

	if ((dbdc_enabled == "1") && (mprofileb != "1"))
	{
		display("table-row","div_per_ssid");
		display("table-row","div_ssid_choice");
		document.wireless_basic.ssidIndex.disabled = false;
	}
	else
	{
		display("none", "div_per_ssid");
		display("none", "div_ssid_choice");
		document.wireless_basic.ssidIndex.disabled = true;
	}

	//changeSecurityPolicyTableTitle(SSID[defaultShownMBSSID]);
}

function OnMBSSIDChanged()
{
	// changed check is disabled currently.
	changed = false;

	// check if any security settings changed
	if(changed){
		ret = confirm("Are you sure to ignore changed?");
		if(!ret){
			document.wireless_basic.ssidIndex.options.selectedIndex = old_MBSSID;
			return false;
		}
		else
			changed = 0;
	}

	var selected = document.wireless_basic.ssidIndex.options.selectedIndex;

	// backup for user cancel action
	old_MBSSID = selected;

	MBSSIDChange(selected);
}

/*
 * When user select the different SSID, this function would be called.
 */
function MBSSIDChange(selected)
{
	// load Basic/HT/VHT table for MBSSID[selected]
	LoadFields(selected);

	return true;
}

function ChannelSetting(mode)
{
	if(mode == "save"){
		if(document.wireless_basic.sz11aChannel.disabled == false)
			current_ch_selected_idx = document.wireless_basic.sz11aChannel.selectedIndex;
		else if(document.wireless_basic.sz11gChannel.disabled == false)
			current_ch_selected_idx = document.wireless_basic.sz11gChannel.selectedIndex;
		else if(document.wireless_basic.sz11bChannel.disabled == false)
			current_ch_selected_idx = document.wireless_basic.sz11bChannel.selectedIndex;
	}else if(mode == "restore"){
		if(document.wireless_basic.sz11aChannel.disabled == false)
			document.wireless_basic.sz11aChannel.selectedIndex = current_ch_selected_idx;
		else if(document.wireless_basic.sz11gChannel.disabled == false)
			document.wireless_basic.sz11gChannel.selectedIndex = current_ch_selected_idx;
		else if(document.wireless_basic.sz11bChannel.disabled == false)
			document.wireless_basic.sz11bChannel.selectedIndex = current_ch_selected_idx;
	}
}

function UpdateMBSSIDList_security()
{
	document.wireless_basic.ssidIndex.length = 0;

	for(var i=0; i<SSID.length; i++){
		var j = document.wireless_basic.ssidIndex.options.length;
		document.wireless_basic.ssidIndex.options[j] = new Option(SSID[i], i, false, false);
	}

	document.wireless_basic.ssidIndex.options.selectedIndex = defaultShownMBSSID;
	old_MBSSID = defaultShownMBSSID;
	//changeSecurityPolicyTableTitle(SSID[defaultShownMBSSID]);
}

function hideWep()
{
	display("none", "div_wep");
}

function showWep(mode)
{
	<!-- WEP -->
	display("table", "div_wep");
	//document.wireless_basic.wep_auth_type.disabled = false;
}

function securityMode(c_f)
{
	var security_mode;


	changed = c_f;

	hideWep();

	display("none", "div_wpa");
	display("none", "div_wpa_algorithms");
	display("none", "wpa_passphrase");
	display("none", "wpa_key_renewal_interval");
	display("none", "wpa_PMK_Cache_Period");
	display("none", "wpa_preAuthentication");
	document.wireless_basic.cipher[0].disabled = true;
	document.wireless_basic.cipher[1].disabled = true;
	document.wireless_basic.cipher[2].disabled = true;
	document.wireless_basic.passphrase.disabled = true;
	document.wireless_basic.keyRenewalInterval.disabled = true;
	document.wireless_basic.PMKCachePeriod.disabled = true;
	document.wireless_basic.PreAuthentication.disabled = true;



	security_mode = document.wireless_basic.security_mode.value;

	if (security_mode == "OPEN" || security_mode == "SHARED" ||security_mode == "WEPAUTO")
	{
		showWep(security_mode);
	}else if (security_mode == "WPAPSK" || security_mode == "WPA2PSK" || security_mode == "WPAPSKWPA2PSK"){
		<!-- WPA -->
		display("table", "div_wpa");
		display("table-row", "div_wpa_algorithms");
		document.wireless_basic.cipher[0].disabled = false;
		document.wireless_basic.cipher[1].disabled = false;

		// deal with TKIP-AES mixed mode
		if(security_mode == "WPA2PSK" || security_mode == "WPAPSKWPA2PSK")
			document.wireless_basic.cipher[2].disabled = false;


		display("table-row", "wpa_passphrase");
		document.wireless_basic.passphrase.disabled = false;

		//display("table-row", "wpa_key_renewal_interval");
		//document.wireless_basic.keyRenewalInterval.disabled = false;
	}else if (security_mode == "WPA" || security_mode == "WPA2" || security_mode == "WPA1WPA2") //wpa enterprise
	{
		display("table", "div_wpa");
		display("table-row", "div_wpa_algorithms");
		document.wireless_basic.cipher[0].disabled = false;
		document.wireless_basic.cipher[1].disabled = false;
		//display("table-row", "wpa_key_renewal_interval");
		//document.wireless_basic.keyRenewalInterval.disabled = false;


	}
}

function LoadFields_security(MBSSID)
{
	var result;
	var wps_enable;

	if ((dbdcb == "1") && (dbdc_en == "1")){
		var wps_enable_list = wpsenable.split(";");

		if (wps_enable_list.length > MBSSID)
			wps_enable = wps_enable_list[MBSSID];
		else
			wps_enable = "0";
		//console.log("wps_enable_list.length="+ wps_enable_list.length +" MBSSID="+ MBSSID +" wps_enable="+ wps_enable +" wpsenable="+ wpsenable);
	} else {
		wps_enable = wpsenable;
	}

	// Security Policy
	sp_select = document.getElementById("security_mode");

	sp_select.options.length = 0;

	sp_select.options[sp_select.length] = new Option("关闭",		"Disable",	false, AuthMode[MBSSID] == "Disable");
	sp_select.options[sp_select.length] = new Option("OPENWEP",	"OPEN",	false, AuthMode[MBSSID] == "OPEN");
	if (wps_enable == "0")
	{
		sp_select.options[sp_select.length] = new Option("SHAREDWEP","SHARED", 	false, AuthMode[MBSSID] == "SHARED");

		//sp_select.options[sp_select.length] = new Option("WEPAUTO", "WEPAUTO",	false, AuthMode[MBSSID] == "WEPAUTO");
	}
	//if (wps_enable == "0" && wpa_support == 1) {
		//sp_select.options[sp_select.length] = new Option("WPA", "WPA",		false, AuthMode[MBSSID] == "WPA");
		sp_select.options[sp_select.length] = new Option("WPA-PSK", "WPAPSK",	false, AuthMode[MBSSID] == "WPAPSK");
	//}
	//if (wps_enable == "0")
		//sp_select.options[sp_select.length] = new Option("WPA2", "WPA2",		false, AuthMode[MBSSID] == "WPA2");
	sp_select.options[sp_select.length] = new Option("WPA2-PSK", "WPA2PSK",	false, AuthMode[MBSSID] == "WPA2PSK");
	sp_select.options[sp_select.length] = new Option("WPAPSKWPA2PSK", "WPAPSKWPA2PSK",	false, AuthMode[MBSSID] == "WPAPSKWPA2PSK");
	//if (wps_enable == "0")
		//sp_select.options[sp_select.length] = new Option("WPA1WPA2","WPA1WPA2",	false, AuthMode[MBSSID] == "WPA1WPA2");

	//if (wps_enable == "0")
		//sp_select.options[sp_select.length] = new Option("802.1X",	"IEEE8021X",false, AuthMode[MBSSID] == "IEEE8021X");
		
	// WEP
	document.getElementById("WEP1").value = Key1Str[MBSSID];
	document.getElementById("WEP2").value = Key2Str[MBSSID];
	document.getElementById("WEP3").value = Key3Str[MBSSID];
	document.getElementById("WEP4").value = Key4Str[MBSSID];

	document.getElementById("WEP1Select").selectedIndex = (Key1Type[MBSSID] == "0" ? 1 : 0);
	document.getElementById("WEP2Select").selectedIndex = (Key2Type[MBSSID] == "0" ? 1 : 0);
	document.getElementById("WEP3Select").selectedIndex = (Key3Type[MBSSID] == "0" ? 1 : 0);
	document.getElementById("WEP4Select").selectedIndex = (Key4Type[MBSSID] == "0" ? 1 : 0);

	document.getElementById("wep_default_key").selectedIndex = parseInt(DefaultKeyID[MBSSID]) - 1 ;

	// WPA
	if(EncrypType[MBSSID] == "TKIP")
		document.wireless_basic.cipher[0].checked = true;
	else if(EncrypType[MBSSID] == "AES")
		document.wireless_basic.cipher[1].checked = true;
	else if(EncrypType[MBSSID] == "TKIPAES")
		document.wireless_basic.cipher[2].checked = true;

	document.getElementById("passphrase").value = WPAPSK[MBSSID];
	document.getElementById("keyRenewalInterval").value = RekeyInterval[MBSSID];
	document.getElementById("PMKCachePeriod").value = PMKCachePeriod[MBSSID];
	//document.getElementById("PreAuthentication").value = PreAuth[MBSSID];
	if(PreAuth[MBSSID] == "0")
		document.wireless_basic.PreAuthentication[0].checked = true;
	else
		document.wireless_basic.PreAuthentication[1].checked = true;

	securityMode(0);
}

function initValue()
{
	if(dbdcb != "1")
	{
		display("none", "div_dbdc_mode");
		document.wireless_basic.DBDCEnabled[0].disabled = true;
		document.wireless_basic.DBDCEnabled[1].disabled = true;
	}

	if (1*dbdc_mode == 1)
	{
		document.wireless_basic.DBDCEnabled[0].checked = true;
	}
	else
	{
		document.wireless_basic.DBDCEnabled[1].checked = true;
	}

	/* Init SSID List */
	initSSIDList();
	UpdateMBSSIDList();
	if (defaultShownMBSSID == "")
		defaultShownMBSSID = 0;

	/* Multiple SSID setting */
	for (i=1;i<16;i++)
	{
		var ssid = eval("document.wireless_basic.mssid_"+i+".disabled");

		display("none", "div_hssid"+i);
		ssid = true;
		//document.wireless_basic.hssid[i].disabled = true;
		document.getElementById("hssid_"+i).disabled = true;
	}

	document.wireless_basic.mssid_0.value = "<!--#exec cmd="web 2860 nvram SSID1"-->";
	document.wireless_basic.hssid_0.value = "<!--#exec cmd="web 2860 nvram HideSSID"-->";

	if ((mssidb == "1") || (dbdcb == "1"))
	{
		var num = 8;
		if (mssid16b == "1")
			num = 16;
		if ((dbdcb=="1") && (mprofileb == "1") && (1*dbdc_mode == 1))
			num = 8;
		
		/* no need to display all 8 ssid set, only open 1 for user, add by wxh */
		num=1

		for (i=1;i<num;i++)
		{
			var ssid = eval("document.wireless_basic.mssid_"+i+".disabled");
			display("table-row", "div_hssid"+i);
			ssid = false;
			//document.wireless_basic.hssid[i].disabled = false;
			document.getElementById("hssid_"+i).disabled = false;
		}
		document.wireless_basic.mssid_1.value = "";
		document.wireless_basic.mssid_2.value = "";
		document.wireless_basic.mssid_3.value = "";
		document.wireless_basic.mssid_4.value = "";
		document.wireless_basic.mssid_5.value = "";
		document.wireless_basic.mssid_6.value = "";
		document.wireless_basic.mssid_7.value = "";
		if (num == 16)
		{
			document.wireless_basic.mssid_8.value = "";
			document.wireless_basic.mssid_9.value = "";
			document.wireless_basic.mssid_10.value = "";
			document.wireless_basic.mssid_11.value = "";
			document.wireless_basic.mssid_12.value = "";
			document.wireless_basic.mssid_13.value = "";
			document.wireless_basic.mssid_14.value = "";
			document.wireless_basic.mssid_15.value = "";
		}
	}

	if (1*mesh_include == 1 && 1*apcli_include == 1 && 1*mt_mac != 1)
	{
		document.wireless_basic.mssid_6.disabled = true;
		document.wireless_basic.mssid_7.disabled = true;
	}
	else if ((1*mesh_include == 1 || 1*apcli_include == 1) && 1*mt_mac != 1)
		document.wireless_basic.mssid_7.disabled = true;


	if (HiddenSSID.indexOf("0") >= 0)
	{
		document.wireless_basic.broadcastssid[0].checked = true;
		var HiddenSSIDArray = HiddenSSID.split(";");
		for (i=0;i<BssidNum;i++)
		{
			if (HiddenSSIDArray[i] == "1")
				document.getElementById("hssid_"+i).checked = true;
				//document.wireless_basic.hssid[i].checked = true;
			else
				document.getElementById("hssid_"+i).checked = false;
				//document.wireless_basic.hssid[i].checked = false;
		}
	}
	else
	{
		document.wireless_basic.broadcastssid[1].checked = true;
		for (i=0;i<BssidNum;i++)
			document.getElementById("hssid_"+i).checked = true;
			//document.wireless_basic.hssid[i].checked = true;
	}


/*	if (APIsolated.indexOf("1") >= 0)
	{
		document.wireless_basic.apisolated[0].checked = true;
		var APIsolatedArray = APIsolated.split(";");
		for (i=0;i<BssidNum;i++)
		{
			if (APIsolatedArray[i] == "1")
				document.getElementById("isolated_ssid_"+i).checked = true;
				//document.wireless_basic.isolated_ssid[i].checked = true;
			else
				document.getElementById("isolated_ssid_"+i).checked = false;
				//document.wireless_basic.isolated_ssid[i].checked = false;
		}
	}
	else
	{
		document.wireless_basic.apisolated[1].checked = true;
		for (i=0;i<BssidNum;i++)
			document.getElementById("isolated_ssid_"+i).checked = false;
			//document.wireless_basic.isolated_ssid[i].checked = false;
	}*/

	/* Get per SSID Setting */
	str = "9";
	PhyModeList = str.split(";");

	str = "0";
	ChIdxList = str.split(";");

	ht_extcha_list = ht_extcha.split(";");
	
	/*from security.shtml*/ 
	
	if (defaultShownMBSSID == "")
		defaultShownMBSSID = 0;
	if ((str = "<!--#exec cmd="web 2860 nvram SSID1"-->") != "")
	{
		SSID[0] = str;
		Key1Str[0] = "<!--#exec cmd="web 2860 nvram Key1Str1"-->";
		Key2Str[0] = "<!--#exec cmd="web 2860 nvram Key2Str1"-->";
		Key3Str[0] = "<!--#exec cmd="web 2860 nvram Key3Str1"-->";
		Key4Str[0] = "<!--#exec cmd="web 2860 nvram Key4Str1"-->";
		WPAPSK[0] = "<!--#exec cmd="web 2860 nvram WPAPSK1"-->";
	}
	
	str = "<!--#exec cmd="web 2860 nvram PreAuth"-->";
	PreAuth = str.split(";");
	str = "<!--#exec cmd="web 2860 nvram AuthMode"-->";
	AuthMode = str.split(";");
	str = "<!--#exec cmd="web 2860 nvram EncrypType"-->";
	EncrypType = str.split(";");
	str = "<!--#exec cmd="web 2860 nvram DefaultKeyID"-->";
	DefaultKeyID = str.split(";");
	str = "<!--#exec cmd="web 2860 nvram Key1Type"-->";
	Key1Type = str.split(";");
	str = "<!--#exec cmd="web 2860 nvram Key2Type"-->";
	Key2Type = str.split(";");
	str = "<!--#exec cmd="web 2860 nvram Key3Type"-->";
	Key3Type = str.split(";");
	str = "<!--#exec cmd="web 2860 nvram Key4Type"-->";
	Key4Type = str.split(";");
	str = "<!--#exec cmd="web 2860 nvram RekeyInterval"-->";
	RekeyInterval = str.split(";");

	
	UpdateMBSSIDList_security();
	LoadFields_security(defaultShownMBSSID);
	
	/*end from security.shtml*/

	dbdc_driver_workaround(1,0);
	initWirelessMode();

	LoadFields(0);
}

function LoadFields(MBSSID)
{
	var Ch11aIdx;
	var CurrChLen;
	var aband_radio_off = "";
	var gband_radio_off = "<!--#exec cmd="web 2860 nvram RadioOff"-->";
	var wifi_off = "<!--#exec cmd="web 2860 nvram WiFiOff"-->";
//	var mssidb = "1";
	var dbdc_enabled =  document.wireless_basic.DBDCEnabled[0].checked; //set in initValue();
	var i = 0;

	/*
	 * Get per BSSID setting
	 * Simply use PhyMode length as base to check if there is enough settings for selected BSSID
	 * If not enough, use first BSSID setting which must exist.
	 */
	if(MBSSID > (PhyModeList.length - 1))
	{
		MBSSID = 0;
	}

	//only one ssid
	//var PhyMode = 1*PhyModeList[MBSSID];
	//var ChIdx = 1*ChIdxList[MBSSID];
	var PhyMode  = "<!--#exec cmd="web 2860 nvram WirelessMode"-->";
	var ChIdx = "<!--#exec cmd="web 2860 nvram Channel"-->";

	if (CntyCd == '')
		CntyCd = 'NONE';


	document.wireless_basic.ssidIndex.options.selectedIndex = MBSSID;

	display("none", "div_11a_channel");
	document.wireless_basic.sz11aChannel.disabled = true;
	display("none", "div_11b_channel");
	document.wireless_basic.sz11bChannel.disabled = true;
	display("none", "div_11g_channel");
	document.wireless_basic.sz11gChannel.disabled = true;
	display("none", "div_11n");
	document.wireless_basic.n_mode.disabled = true;
	document.wireless_basic.n_bandwidth.disabled = true;
	document.wireless_basic.n_rdg.disabled = true;
	document.wireless_basic.n_gi.disabled = true;
	document.wireless_basic.n_mcs.disabled = true;
	//display("none", "div_2040_coexit");
	document.wireless_basic.n_2040_coexit.disabled = true;
	document.wireless_basic.n_ldpc.disabled = true;
	display("none", "div_11vht");
	document.wireless_basic.vht_bandwidth.disabled = true;
	document.wireless_basic.vht_stbc.disabled = true;
	document.wireless_basic.vht_sgi.disabled = true;
	document.wireless_basic.vht_bw_signal.disabled = true;
	document.wireless_basic.vht_ldpc.disabled = true;


	if ((PhyMode == 9) || (PhyMode == 6) || (PhyMode == 8) || (PhyMode == 11) || (PhyMode >= 14))
	{
		display("table", "div_11n");
		document.wireless_basic.n_mode.disabled = false;
		document.wireless_basic.n_bandwidth.disabled = false;
		document.wireless_basic.n_rdg.disabled = false;
		document.wireless_basic.n_gi.disabled = false;
		document.wireless_basic.n_mcs.disabled = false;
		document.wireless_basic.n_ldpc.disabled = false;
		if (PhyMode >= 14)
		{
			display("table", "div_11vht");
			document.wireless_basic.vht_bandwidth.disabled = false;
			document.wireless_basic.vht_stbc.disabled = false;
			document.wireless_basic.vht_sgi.disabled = false;
			document.wireless_basic.vht_bw_signal.disabled = false;
			document.wireless_basic.vht_ldpc.disabled = false;
		}
	}

	//initWirelessMode();
	var wmode_len = document.wireless_basic.wirelessmode.length;
	for (var i=0; i<wmode_len; i++) {
		if (PhyMode == document.wireless_basic.wirelessmode.options[i].value) {
			document.wireless_basic.wirelessmode.selectedIndex = i;
			break;
		}
		document.wireless_basic.wirelessmode.selectedIndex = 0;
	}

	if ((PhyMode == 0) || (PhyMode == 4) || (PhyMode == 9) || (PhyMode == 6))
	{
		display("table-row", "div_11g_channel");
		document.wireless_basic.sz11gChannel.disabled = false;
	}
	else if (PhyMode == 1)
	{
		display("table-row", "div_11b_channel");
		document.wireless_basic.sz11bChannel.disabled = false;
	}
	else if ((PhyMode == 2) || (PhyMode == 8) || (PhyMode == 11) || (PhyMode >= 14))
	{
		display("table-row", "div_11a_channel");
		document.wireless_basic.sz11aChannel.disabled = false;
	}

	/* Orignal MBSSID setting here, move to new initValue() */

	if (1*ht_bw == 0) {
		document.wireless_basic.n_bandwidth[0].checked = true;
		display("none", "div_extension_channel");
		document.wireless_basic.n_extcha.disabled = true;
	} else {
		if (1*ht_2040_coexit == 0) {
			document.wireless_basic.n_bandwidth[2].checked = true;
			//display("table-row", "div_extension_channel");
			document.wireless_basic.n_extcha.disabled = false;
		} else {
			document.wireless_basic.n_bandwidth[1].checked = true;
			//display("table-row", "div_extension_channel");
			document.wireless_basic.n_extcha.disabled = false;
		}
	}

	var ch_illegal = false;
	if ((PhyMode == 0) || (PhyMode == 4) || (PhyMode == 6) || (PhyMode == 7) || (PhyMode == 9))
	{
		/* 2.4G 11g or 11n mode */
		document.wireless_basic.sz11gChannel.options.selectedIndex = ChIdx;

		if ((CntyCd == 'US' || CntyCd == 'TW') && (ChIdx < 1 || ChIdx > 11))
		{
			ch_illegal = true;
			//document.wireless_basic.sz11gChannel.options.selectedIndex = 0;
		}
		else if ((CntyCd == 'FR' || CntyCd == 'IE' || CntyCd == 'HK') && (ChIdx < 1 || ChIdx > 13))
		{
			ch_illegal = true;
			//document.wireless_basic.sz11gChannel.options.selectedIndex = 0;
		}
		else if (CntyCd == 'JP' && (ChIdx < 1 || ChIdx > 14))
		{
			ch_illegal = true;
			//document.wireless_basic.sz11gChannel.options.selectedIndex = 0;
		}
		else
		{
		//if (ChIdx < 1 || ChIdx > 14){
			if (ChIdx > 14){
				ch_illegal = true;
				//document.wireless_basic.sz11gChannel.options.selectedIndex = 0;
			}
		}
		if (ch_illegal)
			showCountryCodeWarnning(CntyCd, ChIdx, "b/g/n");
	}
	else if (PhyMode == 1)
	{
		/* 11b mode */
		document.wireless_basic.sz11bChannel.options.selectedIndex = ChIdx;

		if ((CntyCd == 'US' || CntyCd == 'TW') && (ChIdx < 1 || ChIdx > 11))
		{
			ch_illegal = true;
			//document.wireless_basic.sz11bChannel.options.selectedIndex = 0;
		}
		else if ((CntyCd == 'FR' || CntyCd == 'IE' || CntyCd == 'HK') && (ChIdx < 1 || ChIdx > 13))
		{
			ch_illegal = true;
			//document.wireless_basic.sz11bChannel.options.selectedIndex = 0;
		}
		else if (CntyCd == 'JP' && (ChIdx < 1 || ChIdx > 14))
		{
			ch_illegal = true;
			//document.wireless_basic.sz11bChannel.options.selectedIndex = 0;
		}
		else
		{
			if (ChIdx < 1 || ChIdx > 14){
				ch_illegal = true;
				//document.wireless_basic.sz11bChannel.options.selectedIndex = 0;
			}
		}
		if (ch_illegal)
			showCountryCodeWarnning(CntyCd, ChIdx, "b");
	}
	else if ((PhyMode == 2) || (PhyMode == 8) || (PhyMode == 11) || (PhyMode >= 14))
	{
		/* 5G 11a or 11n or 11ac mode */
		if(ChIdx >= 36 && ChIdx <=64) document.wireless_basic.sz11aChannel.options.selectedIndex = ((ChIdx-36) / 4) + 1;
		else if(ChIdx >= 100 && ChIdx <=140) document.wireless_basic.sz11aChannel.options.selectedIndex = ((ChIdx-64) / 4);
		else if(ChIdx >= 149 && ChIdx <=173) document.wireless_basic.sz11aChannel.options.selectedIndex = ((ChIdx-1-64) / 4) - 1;

		if (CntyCd == 'HK' && (ChIdx < 36 || (ChIdx > 64 && ChIdx < 100) || ChIdx > 165))
		{
			ch_illegal = true;
			//document.wireless_basic.sz11aChannel.options.selectedIndex = 0;
		}
		else if (CntyCd == 'IE' && (ChIdx < 36 || (ChIdx > 64 && ChIdx < 100) || ChIdx > 140))
		{
			ch_illegal = true;
			//document.wireless_basic.sz11aChannel.options.selectedIndex = 0;
		}
		else if (CntyCd == 'FR' && (ChIdx < 36 || (ChIdx > 64 && ChIdx < 100) || ChIdx > 140))
		{
			ch_illegal = true;
			//document.wireless_basic.sz11aChannel.options.selectedIndex = 0;
		}
		else if (CntyCd == 'JP' && (ChIdx < 36 || (ChIdx > 64 && ChIdx < 100) || ChIdx > 140))
		{
			ch_illegal = true;
			//document.wireless_basic.sz11aChannel.options.selectedIndex = 0;
		}
		else if (CntyCd == 'US' && (ChIdx < 36 || (ChIdx > 64 && ChIdx < 100) || (ChIdx > 116 && ChIdx < 132) || (ChIdx > 144 && ChIdx < 149) || ChIdx > 165))
		{
			ch_illegal = true;
			//document.wireless_basic.sz11aChannel.options.selectedIndex = 0;
		}
		else if (CntyCd == 'TW' && (ChIdx < 56 || (ChIdx > 64 && ChIdx < 149) || ChIdx > 161))
		{
			ch_illegal = true;
			//document.wireless_basic.sz11aChannel.options.selectedIndex = 0;
		}
		else
		{
			if (ChIdx < 36 || (ChIdx > 64 && ChIdx < 100) || (ChIdx > 140 && ChIdx < 149) || ChIdx > 173){
				ch_illegal = true;
				//document.wireless_basic.sz11aChannel.options.selectedIndex = 0;
			}
		}
	}

	//ABG Rate
	if ((PhyMode == 0) || (PhyMode == 2) || (PhyMode == 4))
	{
		document.wireless_basic.abg_rate.options.length = 0;
		document.wireless_basic.abg_rate.options[0] = new Option("Auto", "0");
		document.wireless_basic.abg_rate.options[1] = new Option("1 Mbps", "1");
		document.wireless_basic.abg_rate.options[2] = new Option("2 Mbps", "2");
		document.wireless_basic.abg_rate.options[3] = new Option("5.5 Mbps", "5");
		document.wireless_basic.abg_rate.options[4] = new Option("6 Mbps", "6");
		document.wireless_basic.abg_rate.options[5] = new Option("9 Mbps", "9");
		document.wireless_basic.abg_rate.options[6] = new Option("11 Mbps", "11");
		document.wireless_basic.abg_rate.options[7] = new Option("12 Mbps", "12");
		document.wireless_basic.abg_rate.options[8] = new Option("18 Mbps", "18");
		document.wireless_basic.abg_rate.options[9] = new Option("24 Mbps", "24");
		document.wireless_basic.abg_rate.options[10] = new Option("36 Mbps", "36");
		document.wireless_basic.abg_rate.options[11] = new Option("48 Mbps", "48");
		document.wireless_basic.abg_rate.options[12] = new Option("54 Mbps", "54");
		if (fxtxmode == "CCK" || fxtxmode == "cck") {
			if (ht_mcs.indexOf("33") == 0)
				document.wireless_basic.abg_rate.options.selectedIndex = 0;
			else if (ht_mcs.indexOf("0") == 0)
				document.wireless_basic.abg_rate.options.selectedIndex = 1;
			else if (ht_mcs.indexOf("1") == 0)
				document.wireless_basic.abg_rate.options.selectedIndex = 2;
			else if (ht_mcs.indexOf("2") == 0)
				document.wireless_basic.abg_rate.options.selectedIndex = 3;
			else if (ht_mcs.indexOf("3") == 0)
				document.wireless_basic.abg_rate.options.selectedIndex = 6;
		}
		else {
			if (ht_mcs.indexOf("33") == 0)
				document.wireless_basic.abg_rate.options.selectedIndex = 0;
			else if (ht_mcs.indexOf("0") == 0)
				document.wireless_basic.abg_rate.options.selectedIndex = 4;
			else if (ht_mcs.indexOf("1") == 0)
				document.wireless_basic.abg_rate.options.selectedIndex = 5;
			else if (ht_mcs.indexOf("2") == 0)
				document.wireless_basic.abg_rate.options.selectedIndex = 7;
			else if (ht_mcs.indexOf("3") == 0)
				document.wireless_basic.abg_rate.options.selectedIndex = 8;
			else if (ht_mcs.indexOf("4") == 0)
				document.wireless_basic.abg_rate.options.selectedIndex = 9;
			else if (ht_mcs.indexOf("5") == 0)
				document.wireless_basic.abg_rate.options.selectedIndex = 10;
			else if (ht_mcs.indexOf("6") == 0)
				document.wireless_basic.abg_rate.options.selectedIndex = 11;
			else if (ht_mcs.indexOf("7") == 0)
				document.wireless_basic.abg_rate.options.selectedIndex = 12;
		}
	}
	else if (PhyMode == 1)
	{
		document.wireless_basic.abg_rate.options.length = 0;
		document.wireless_basic.abg_rate.options[0] = new Option("Auto", "0");
		document.wireless_basic.abg_rate.options[1] = new Option("1 Mbps", "1");
		document.wireless_basic.abg_rate.options[2] = new Option("2 Mbps", "2");
		document.wireless_basic.abg_rate.options[3] = new Option("5.5 Mbps", "5");
		document.wireless_basic.abg_rate.options[4] = new Option("11 Mbps", "11");
		if (ht_mcs.indexOf("33") == 0)
			document.wireless_basic.abg_rate.options.selectedIndex = 0;
		else if (ht_mcs.indexOf("0") == 0)
			document.wireless_basic.abg_rate.options.selectedIndex = 1;
		else if (ht_mcs.indexOf("1") == 0)
			document.wireless_basic.abg_rate.options.selectedIndex = 2;
		else if (ht_mcs.indexOf("2") == 0)
			document.wireless_basic.abg_rate.options.selectedIndex = 3;
		else if (ht_mcs.indexOf("3") == 0)
			document.wireless_basic.abg_rate.options.selectedIndex = 4;
	}
	else
	{
		display("none", "div_abg_rate");
		document.wireless_basic.abg_rate.disabled = true;
	}

	display("none", "div_mbssidapisolated");
	document.wireless_basic.mbssidapisolated.disabled = true;
	if (mssidb == "1")
	{
		//display("table-row", "div_mbssidapisolated");
		document.wireless_basic.mbssidapisolated.disabled = false;
		if (mbssidapisolated == "1")
			document.wireless_basic.mbssidapisolated[0].checked = true;
		else
			document.wireless_basic.mbssidapisolated[1].checked = true;
	}

	InsExtChOpt();
	SelectHtExtCha();

	if (1*ht_stbc == 0)
	{
		document.wireless_basic.n_stbc[0].checked = true;
	}
	else
	{
		document.wireless_basic.n_stbc[1].checked = true;
	}

	if (1*ht_mode == 0)
	{
		document.wireless_basic.n_mode[0].checked = true;
	}
	else if (1*ht_mode == 1)
	{
		document.wireless_basic.n_mode[1].checked = true;
	}

	else if (1*ht_mode == 2)
	{
		document.wireless_basic.n_mode[2].checked = true;
	}

	if (1*ht_gi == 0)
	{
		document.wireless_basic.n_gi[0].checked = true;
	}
	else if (1*ht_gi == 1)
	{
		document.wireless_basic.n_gi[1].checked = true;
	}
	else if (1*ht_gi == 2)
	{
		document.wireless_basic.n_gi[2].checked = true;
	}

	if (1*ht_rdg == 0)
		document.wireless_basic.n_rdg[0].checked = true;
	else
		document.wireless_basic.n_rdg[1].checked = true;


	if ((1*PhyMode == 8) || (1*PhyMode == 11) || (1*PhyMode == 14) || (1*PhyMode == 15))
	{
		if (document.wireless_basic.sz11aChannel.options.selectedIndex == 0)
		{
			display("none", "div_extension_channel");
			document.wireless_basic.n_extcha.disabled = true;
		}
		//else {
		//	if((ht_bw == 1) && (dbdc_enabled)){
		//		display("table-row", "div_extension_channel");
		//		document.wireless_basic.n_extcha.disabled = true;
		//	}
		//}
	}
	else if ((1*PhyMode == 9) || (1*PhyMode == 6))
	{
		if (document.wireless_basic.sz11gChannel.options.selectedIndex == 0)
		{
			//display("table-row", "div_extension_channel");
			display("none", "div_extension_channel");
			document.wireless_basic.n_extcha.disabled = true;
		}
	}

	if (1*ht_amsdu == 0)
		document.wireless_basic.n_amsdu[0].checked = true;
	else
		document.wireless_basic.n_amsdu[1].checked = true;

	if (1*ht_autoba == 0)
		document.wireless_basic.n_autoba[0].checked = true;
	else
		document.wireless_basic.n_autoba[1].checked = true;

	if (1*ht_badecline == 0)
		document.wireless_basic.n_badecline[0].checked = true;
	else
		document.wireless_basic.n_badecline[1].checked = true;

	if (1*ht_disallow_tkip == 1)
		document.wireless_basic.n_disallow_tkip[1].checked = true;
	else
		document.wireless_basic.n_disallow_tkip[0].checked = true;

	if (1*draft3b == 1)
	{
		//display("table-row", "div_2040_coexit");
		document.wireless_basic.n_2040_coexit.disabled = false;
		if (1*ht_2040_coexit == 0)
			document.wireless_basic.n_2040_coexit[0].checked = true;
		else
			document.wireless_basic.n_2040_coexit[1].checked = true;
	}
	if (1*ht_ldpc == 0)
		document.wireless_basic.n_ldpc[0].checked = true;
	else
		document.wireless_basic.n_ldpc[1].checked = true;

	changeHTStream(PhyMode);

	changeMCSoptions(PhyMode);

	if (AC == "1")
	{
		var ch_len = document.wireless_basic.vht2nd11aChannel.value;
		changeVHTBW();
		if(!document.wireless_basic.vht_bandwidth[1*vht_bw].disabled)
			document.wireless_basic.vht_bandwidth[1*vht_bw].checked = true;
		create2ndVHTChannel(document.wireless_basic.sz11aChannel.value);
		ch_len = document.wireless_basic.vht2nd11aChannel.length;
		while (ch_len > 0) {
			if (vht_2ndch == document.wireless_basic.vht2nd11aChannel.options[--ch_len].value) {
				document.wireless_basic.vht2nd11aChannel.options.selectedIndex = ch_len;
				break;
			}
		}
		if (1*vht_stbc == 1)
		{
			document.wireless_basic.vht_stbc[1].checked = true;
		}
		else
		{
			document.wireless_basic.vht_stbc[0].checked = true;
		}
		if (1*vht_sgi == 1)
		{
			document.wireless_basic.vht_sgi[1].checked = true;
		}
		else
		{
			document.wireless_basic.vht_sgi[0].checked = true;
		}
		if (1*vht_bw_signal == 2)
		{
			document.wireless_basic.vht_bw_signal[2].checked = true;
		}
		else if (1*vht_bw_signal == 1)
		{
			document.wireless_basic.vht_bw_signal[1].checked = true;
		}
		else
		{
			document.wireless_basic.vht_bw_signal[0].checked = true;
		}
		if (1*vht_ldpc == 1)
		{
			document.wireless_basic.vht_ldpc[1].checked = true;
		}
		else
		{
			document.wireless_basic.vht_ldpc[0].checked = true;
		}
	}

	if((is_gband(1*PhyMode) == 1) && (gband_radio_off == 1))
		document.wireless_basic.radioButton.value = "开启WiFi";
	else if((is_gband(1*PhyMode) == 0) && (aband_radio_off == 1))
		document.wireless_basic.radioButton.value = "开启WiFi";
	else
		document.wireless_basic.radioButton.value = "关闭WiFi";

	if (1*wifi_off == 1)
		document.wireless_basic.WiFiButton.value = "开启全部的WIFI接口";
	else
		document.wireless_basic.WiFiButton.value = "关闭全部的WIFI接口";

	dbdc_driver_workaround(0,1);


	ChannelSetting("save");
}

function wirelessModeChange()
{
	var wmode;

	display("none", "div_11a_channel");
	document.wireless_basic.sz11aChannel.disabled = true;
	display("none", "div_11b_channel");
	document.wireless_basic.sz11bChannel.disabled = true;
	display("none", "div_11g_channel");
	document.wireless_basic.sz11gChannel.disabled = true;
	display("none", "div_abg_rate");
	document.wireless_basic.abg_rate.disabled = true;
	display("none", "div_11n");
	document.wireless_basic.n_mode.disabled = true;
	document.wireless_basic.n_bandwidth.disabled = true;
	document.wireless_basic.n_rdg.disabled = true;
	document.wireless_basic.n_gi.disabled = true;
	document.wireless_basic.n_mcs.disabled = true;
	document.wireless_basic.n_ldpc.disabled = true;
	display("none", "div_11vht");
	document.wireless_basic.vht_bandwidth.disabled = true;
	document.wireless_basic.vht_stbc.disabled = true;
	document.wireless_basic.vht_sgi.disabled = true;
	document.wireless_basic.vht_bw_signal.disabled = true;
	document.wireless_basic.vht_ldpc.disabled = true;

	wmode = document.wireless_basic.wirelessmode.options[document.wireless_basic.wirelessmode.selectedIndex].value;

	wmode = 1*wmode;
	if (wmode == 0)
	{
		display("table-row", "div_11g_channel");
		document.wireless_basic.sz11gChannel.disabled = false;
	}
	else if (wmode == 1)
	{
		display("table-row", "div_11b_channel");
		document.wireless_basic.sz11bChannel.disabled = false;
	}
	else if (wmode == 4)
	{
		display("table-row", "div_11g_channel");
		document.wireless_basic.sz11gChannel.disabled = false;
	}
	else if (wmode == 2)
	{
		display("table-row", "div_11a_channel");
		document.wireless_basic.sz11aChannel.disabled = false;
	}
	else if ((wmode == 8) || (wmode == 11) || (wmode >= 14))
	{
		display("table-row", "div_11a_channel");
		document.wireless_basic.sz11aChannel.disabled = false;
		display("table", "div_11n");
		document.wireless_basic.n_mode.disabled = false;
		document.wireless_basic.n_bandwidth.disabled = false;
		document.wireless_basic.n_rdg.disabled = false;
		document.wireless_basic.n_gi.disabled = false;
		document.wireless_basic.n_mcs.disabled = false;
		document.wireless_basic.n_ldpc.disabled = false;
		changeHTStream(wmode);
		changeMCSoptions(wmode);
		if (wmode >= 12)
		{
			display("table", "div_11vht");
			document.wireless_basic.vht_bandwidth.disabled = false;
			document.wireless_basic.vht_stbc.disabled = false;
			document.wireless_basic.vht_sgi.disabled = false;
			document.wireless_basic.vht_bw_signal.disabled = false;
			document.wireless_basic.vht_ldpc.disabled = false;
		}
		changeHTBW();
		changeVHTBW();
		create2ndVHTChannel(document.wireless_basic.sz11aChannel.value);

		if (document.wireless_basic.sz11aChannel.options.selectedIndex == 0)
		{
			display("none", "div_extension_channel");
			document.wireless_basic.n_extcha.disabled = true;
		}

		InsExtChOpt();
	}
	else if ((wmode == 9) || (wmode == 6))
	{
		display("table-row", "div_11g_channel");
		document.wireless_basic.sz11gChannel.disabled = false;
		display("table", "div_11n");
		document.wireless_basic.n_mode.disabled = false;
		document.wireless_basic.n_bandwidth.disabled = false;
		document.wireless_basic.n_rdg.disabled = false;
		document.wireless_basic.n_gi.disabled = false;
		document.wireless_basic.n_mcs.disabled = false;
		document.wireless_basic.n_ldpc.disabled = false;
		changeHTStream(wmode);
		changeMCSoptions(wmode);
		changeHTBW();
		changeVHTBW();
		create2ndVHTChannel(document.wireless_basic.sz11aChannel.value);

		if (document.wireless_basic.sz11gChannel.options.selectedIndex == 0)
		{
			display("none", "div_extension_channel");
			document.wireless_basic.n_extcha.disabled = true;
		}

		InsExtChOpt();
	}

	dbdc_driver_workaround(0,1);

	//ABG Rate
	if ((wmode == 0) || (wmode == 4) || (wmode == 2))
	{
		document.wireless_basic.abg_rate.options.length = 0;
		document.wireless_basic.abg_rate.options[0] = new Option("Auto", "0");
		document.wireless_basic.abg_rate.options[1] = new Option("1 Mbps", "1");
		document.wireless_basic.abg_rate.options[2] = new Option("2 Mbps", "2");
		document.wireless_basic.abg_rate.options[3] = new Option("5.5 Mbps", "5");
		document.wireless_basic.abg_rate.options[4] = new Option("6 Mbps", "6");
		document.wireless_basic.abg_rate.options[5] = new Option("9 Mbps", "9");
		document.wireless_basic.abg_rate.options[6] = new Option("11 Mbps", "11");
		document.wireless_basic.abg_rate.options[7] = new Option("12 Mbps", "12");
		document.wireless_basic.abg_rate.options[8] = new Option("18 Mbps", "18");
		document.wireless_basic.abg_rate.options[9] = new Option("24 Mbps", "24");
		document.wireless_basic.abg_rate.options[10] = new Option("36 Mbps", "36");
		document.wireless_basic.abg_rate.options[11] = new Option("48 Mbps", "48");
		document.wireless_basic.abg_rate.options[12] = new Option("54 Mbps", "54");
		if (fxtxmode == "CCK" || fxtxmode == "cck") {
			if (ht_mcs.indexOf("33") == 0)
				document.wireless_basic.abg_rate.options.selectedIndex = 0;
			else if (ht_mcs.indexOf("0") == 0)
				document.wireless_basic.abg_rate.options.selectedIndex = 1;
			else if (ht_mcs.indexOf("1") == 0)
				document.wireless_basic.abg_rate.options.selectedIndex = 2;
			else if (ht_mcs.indexOf("2") == 0)
				document.wireless_basic.abg_rate.options.selectedIndex = 3;
			else if (ht_mcs.indexOf("3") == 0)
				document.wireless_basic.abg_rate.options.selectedIndex = 6;
		}
		else {
			if (ht_mcs.indexOf("33") == 0)
				document.wireless_basic.abg_rate.options.selectedIndex = 0;
			else if (ht_mcs.indexOf("0") == 0)
				document.wireless_basic.abg_rate.options.selectedIndex = 4;
			else if (ht_mcs.indexOf("1") == 0)
				document.wireless_basic.abg_rate.options.selectedIndex = 5;
			else if (ht_mcs.indexOf("2") == 0)
				document.wireless_basic.abg_rate.options.selectedIndex = 7;
			else if (ht_mcs.indexOf("3") == 0)
				document.wireless_basic.abg_rate.options.selectedIndex = 8;
			else if (ht_mcs.indexOf("4") == 0)
				document.wireless_basic.abg_rate.options.selectedIndex = 9;
			else if (ht_mcs.indexOf("5") == 0)
				document.wireless_basic.abg_rate.options.selectedIndex = 10;
			else if (ht_mcs.indexOf("6") == 0)
				document.wireless_basic.abg_rate.options.selectedIndex = 11;
			else if (ht_mcs.indexOf("7") == 0)
				document.wireless_basic.abg_rate.options.selectedIndex = 12;
		}

		display("table-row", "div_abg_rate");
		document.wireless_basic.abg_rate.disabled = false;
	}
	else if (wmode == 1)
	{
		document.wireless_basic.abg_rate.options.length = 0;
		document.wireless_basic.abg_rate.options[0] = new Option("Auto", "0");
		document.wireless_basic.abg_rate.options[1] = new Option("1 Mbps", "1");
		document.wireless_basic.abg_rate.options[2] = new Option("2 Mbps", "2");
		document.wireless_basic.abg_rate.options[3] = new Option("5.5 Mbps", "5");
		document.wireless_basic.abg_rate.options[4] = new Option("11 Mbps", "11");
		if (ht_mcs.indexOf("33") == 0)
			document.wireless_basic.abg_rate.options.selectedIndex = 0;
		else if (ht_mcs.indexOf("0") == 0)
			document.wireless_basic.abg_rate.options.selectedIndex = 1;
		else if (ht_mcs.indexOf("1") == 0)
			document.wireless_basic.abg_rate.options.selectedIndex = 2;
		else if (ht_mcs.indexOf("2") == 0)
			document.wireless_basic.abg_rate.options.selectedIndex = 3;
		else if (ht_mcs.indexOf("3") == 0)
			document.wireless_basic.abg_rate.options.selectedIndex = 4;

		display("table-row", "div_abg_rate");
		document.wireless_basic.abg_rate.disabled = false;
	}
}

function switch_hidden_ssid()
{
	if (document.wireless_basic.broadcastssid[0].checked == true)
		for (i=0;i<BssidNum;i++){
			document.getElementById("hssid_"+i).checked = false;
		}
	else
		if(getConfirmation())
		{
		for (i=0;i<BssidNum;i++){
			document.getElementById("hssid_"+i).checked = true;
			document.getElementById("hssid_"+i).value = 1;
			}
		}
		else
		{
			document.wireless_basic.broadcastssid[0].checked = true
			for (i=0;i<BssidNum;i++){
			document.getElementById("hssid_"+i).checked = false;
			}
		}
}

function switch_isolated_ssid()
{
	if (document.wireless_basic.apisolated[0].checked == true)
		for (i=0;i<BssidNum;i++)
			document.getElementById("isolated_ssid_"+i).checked = true;
			//document.wireless_basic.isolated_ssid[i].checked = true;
	else
		for (i=0;i<BssidNum;i++)
			document.getElementById("isolated_ssid_"+i).checked = false;
			//document.wireless_basic.isolated_ssid[i].checked = false;
}

function check_wpa()
{
	if(document.wireless_basic.cipher[0].checked != true &&
	   document.wireless_basic.cipher[1].checked != true &&
	   document.wireless_basic.cipher[2].checked != true){
		alert('请选择WPA算法.');
		return false;
	}

	// there is no tkip-aes mixed mode in WPA-PSK.
	if ((document.wireless_basic.security_mode.value == "WPA" ||
	     document.wireless_basic.security_mode.value == "WPAPSK") &&
	     document.wireless_basic.cipher[2].checked == true)
	{
		document.wireless_basic.cipher[0].checked = true;
		document.wireless_basic.cipher[1].checked = false;
		document.wireless_basic.cipher[2].checked = false;
	}

	if(isNaN(document.wireless_basic.keyRenewalInterval.value) == true){
		alert('请输入有效的密钥更新间隔');
		return false;
	}
	if(document.wireless_basic.keyRenewalInterval.value == 0){
		//alert('续订密钥间隔等于0，所以设备不会刷新密钥');
	}
	if (ht_disallow_tkip == "1" && document.wireless_basic.cipher[0].checked)
		alert("禁用TKIP / WEP加密功能，因此11N速率将关闭！");

	return true;
}

function checkHex(str){
	var len = str.length;

	for (var i=0; i<str.length; i++) {
		if ((str.charAt(i) >= '0' && str.charAt(i) <= '9') ||
		    (str.charAt(i) >= 'a' && str.charAt(i) <= 'f') ||
		    (str.charAt(i) >= 'A' && str.charAt(i) <= 'F') ){
			continue;
		}else
	        return false;
	}
	return true;
}

function checkInjection(str)
{
	var len = str.length;
	for (var i=0; i<str.length; i++) {
		if ( str.charAt(i) == '\r' || str.charAt(i) == '\n'){
			return false;
		}
	}
	return true;
}

function check_Wep(securitymode)
{
	var defaultid = document.wireless_basic.wep_default_key.value;
	var key_input;

	if ( defaultid == 1 )
		var keyvalue = document.wireless_basic.wep_key_1.value;
	else if (defaultid == 2)
		var keyvalue = document.wireless_basic.wep_key_2.value;
	else if (defaultid == 3)
		var keyvalue = document.wireless_basic.wep_key_3.value;
	else if (defaultid == 4)
		var keyvalue = document.wireless_basic.wep_key_4.value;

	if (keyvalue.length == 0 &&  (securitymode == "SHARED" || securitymode == "OPEN" || securitymode == "WEPAUTO")){ // shared wep  || md5
		alert('请输入wep密码'+defaultid+' !');
		return false;
	}

	var keylength = document.wireless_basic.wep_key_1.value.length;
	if (keylength != 0){
		if (document.wireless_basic.WEP1Select.options.selectedIndex == 0){
			if(keylength != 5 && keylength != 13) {
				alert('wep密码保护5-13个字符 !');
				return false;
			}
			if(checkInjection(document.wireless_basic.wep_key_1.value)== false){
				alert('Wep密码保护不合法字符');
				return false;
			}
		}
		if (document.wireless_basic.WEP1Select.options.selectedIndex == 1){
			if(keylength != 10 && keylength != 26) {
				alert('wep密码长度在10-26字符长度之间1 !');
				return false;
			}
			if(checkHex(document.wireless_basic.wep_key_1.value) == false){
				alert('WEP密钥格式错误!');
				return false;
			}
		}
	}

	keylength = document.wireless_basic.wep_key_2.value.length;
	if (keylength != 0){
		if (document.wireless_basic.WEP2Select.options.selectedIndex == 0){
			if(keylength != 5 && keylength != 13) {
				alert('请输入5-13字符的wep密钥2!');
				return false;
			}
			if(checkInjection(document.wireless_basic.wep_key_2.value)== false){
				alert('Wep密钥2包含不合法的长度.');
				return false;
			}
		}
		if (document.wireless_basic.WEP2Select.options.selectedIndex == 1){
			if(keylength != 10 && keylength != 26) {
				alert('请输入10-26长度的wep密钥2!');
				return false;
			}
			if(checkHex(document.wireless_basic.wep_key_2.value) == false){
				alert('WEP密钥2格式错误');
				return false;
			}
		}
	}

	keylength = document.wireless_basic.wep_key_3.value.length;
	if (keylength != 0){
		if (document.wireless_basic.WEP3Select.options.selectedIndex == 0){
			if(keylength != 5 && keylength != 13) {
				alert('请输入5-13个字符的wep密钥3 !');
				return false;
			}
			if(checkInjection(document.wireless_basic.wep_key_3.value)== false){
				alert('WEP密钥3包含不合法字符.');
				return false;
			}
		}
		if (document.wireless_basic.WEP3Select.options.selectedIndex == 1){
			if(keylength != 10 && keylength != 26) {
				alert('请输入10-26字符的WEP密钥3 !');
				return false;
			}
			if(checkHex(document.wireless_basic.wep_key_3.value) == false){
				alert('WEP密钥3格式错误!');
				return false;
			}
		}
	}

	keylength = document.wireless_basic.wep_key_4.value.length;
	if (keylength != 0){
		if (document.wireless_basic.WEP4Select.options.selectedIndex == 0){
			if(keylength != 5 && keylength != 13) {
				alert('请输入5-13个字符的WEP密钥4!');
				return false;
			}
			if(checkInjection(document.wireless_basic.wep_key_4.value)== false){
				alert('Wep密钥4包含不合法字符');
				return false;
			}
		}
		if (document.wireless_basic.WEP4Select.options.selectedIndex == 1){
			if(keylength != 10 && keylength != 26) {
				alert('请输入10-26个字符的WEP密钥4!');
				return false;
			}

			if(checkHex(document.wireless_basic.wep_key_4.value) == false){
				alert('WEP密钥4格式错误!');
				return false;
			}
		}
	}
	if (ht_disallow_tkip == "1")
		alert("禁用TKIP / WEP加密，因此11N速率将关闭!");

	return true;
}

function checkData()
{
	var securitymode;
	var wps_enable;
//	var ssid = document.wireless_basic.Ssid.value;
	securitymode = document.wireless_basic.security_mode.value;
	var EzEnable = "0";
	var EzConfStatus = "0";
	var easyconfArr = EzConfStatus.split(";");
	var enableArr = EzEnable.split(";");
	/* removed on request by prakhar WCNCR00150255
	if (securitymode != "WPA2PSK" || document.wireless_basic.cipher[1].checked != true)
	{
		if (enableArr[0] == 1 && easyconfArr[0] == 2)
		{
			alert("Please go to MAN page to set Easy Enable as disable.");
			return false;
		}
	}
	*/

	if ((dbdcb == "1") && (dbdc_en == "1")){
		var wps_enable_list = wpsenable.split(";");
		var ssid_idx = document.wireless_basic.ssidIndex.value;

		if (wps_enable_list.length > ssid_idx)
			wps_enable = wps_enable_list[ssid_idx];
		else
			wps_enable = "0";
	} else {
		wps_enable = wpsenable;
	}

	securitymode = document.wireless_basic.security_mode.value;
	if (securitymode == "Disable")
	{
		if (wps_enable != "0")
			alert('该设置不安全!');
	}
	else if (securitymode == "OPEN" || securitymode == "SHARED" ||securitymode == "WEPAUTO")
	{
		if(! check_Wep(securitymode) )
			return false;
		if (wps_enable != "0")
			alert("该项设置将关闭WPS!");
	}
	else if (securitymode == "WPAPSK" || securitymode == "WPA2PSK" || securitymode == "WPAPSKWPA2PSK" /* || security_mode == 5 */)
	{
		var keyvalue = document.wireless_basic.passphrase.value;

		if (keyvalue.length == 0){
			alert('请输入wpapsk密码!');
			return false;
		}

		if (keyvalue.length < 8){
			alert('wpapsk至少为8个字符!');
			return false;
		}

		if (keyvalue.length == 64 && checkHex(keyvalue) == false) {
			alert('请输入8~63英文字符或64个16进制字符!');
			return false;
		}

		if(checkInjection(document.wireless_basic.passphrase.value) == false){
			alert('密码中包含不合法字符.');
			return false;
		}

		if(document.wireless_basic.cipher[0].checked != true &&
		   document.wireless_basic.cipher[1].checked != true &&
		   document.wireless_basic.cipher[2].checked != true){
			alert('请选择WPA算法.');
			return false;
		}

		if(check_wpa() == false)
			return false;
	}
	
	return true;
}

function CheckValue()
{
	var wireless_mode = document.wireless_basic.wirelessmode.value;
	var submit_ssid_num = 0;
	var Ch11aIdx;
	var ssid = eval("document.wireless_basic.mssid_"+0);

	if (ssid.value == "")
	{
		alert("请输入SSID!");
		ssid.focus();
		ssid.select();
		return false;
	}

	for (i = 0; i < max_bssid_num; i++)
	{
		ssid = eval("document.wireless_basic.mssid_"+i);
		if (ssid.value != "")
		{
			var encod_str=encodeURIComponent(ssid.value).replace(/%[A-F\d]{2}/g, 'U');
			if (encod_str.length > 32) {
				alert("SSID长度不能超过32个字符!");
				ssid.focus();
				ssid.select();
				return false;
			}
			if (i > 5)
			{
				if (1*mesh_include == 1 && 1*apcli_include == 1 && 1*mt_mac != 1)
					break;
				else if (i == (max_bssid_num - 1))
					if ((1*mesh_include == 1 || 1*apcli_include == 1) && 1*mt_mac != 1)
						break;
			}
			submit_ssid_num++;
		}
	}

	var wpsenable = "0";
	var dbdc_enabled =  document.wireless_basic.DBDCEnabled[0].checked;
	if ((dbdcb == "1") && (dbdc_enabled == "1") && (mprofileb != "1")){
		var wpsenable_list = wpsenable.split(";");
		var tmp_mssid;
		var tmp_hssid;
		var i;
		for(i = 0; i < max_bssid_num; i++){
			tmp_mssid = document.getElementById("mssid_"+i);
			tmp_hssid = document.getElementById("hssid_"+i);
			if(tmp_mssid.value != "")
				if (wpsenable_list[i] != "0" && tmp_hssid.checked == true)
          alert("SSID" + i +"被关闭，因此WPS也将关闭")
		}
	} else {
		if (wpsenable != "0" && document.wireless_basic.hssid_0.checked == true)
			alert("SSID被关闭，因此WPS也将关闭");
	}

	if ((mprofileb == "1") && (dbdc_ra0_5Gb == "1") && (dbdc_mode != "1") && (dbdc_enabled == "1") && !is_gband(wireless_mode)){
		var ret = confirm("Current 5G setting will be applied to 2.4G interface, rax0, when turn on DBDC for the first time as Wi-Fi driver being configured to use DBDC Multi-Profile and ra0 Default 5G.\nWi-Fi function is going to be chaos if apply this setting. Do you still want to continue?");
		if (!ret)
			return false;
	}

	if (checkData() == true){
		changed = 0;
	}

	dbdc_prevent_outbound_value();
	parent.menu.location.reload();

	
//	document.wireless_basic.submit();
	return true;
}

function RadioStatusChange(rs)
{
	if (rs == 1) {
		alert("如果关闭该BSSID的无线射频, 该频段的所有SSID都被关闭.");
		document.wireless_basic.radioButton.value = "开启该频段的无线";
		document.wireless_basic.radiohiddenButton.value = 0;
	}
	else {
		alert("如果开启该BSSID的无线射频, 该频段的所有SSID都被开启.");
		document.wireless_basic.radioButton.value = "关闭该频段的无线";
		document.wireless_basic.radiohiddenButton.value = 1;
	}
}

function WiFiStatusChange(rs)
{
	if (rs == 1) {
		alert("如果启用了MBSSID或DBDC，则同一WiFi卡中的所有Wi-Fi接口将被关闭.");
		document.wireless_basic.WiFiButton.value = "开启WIFI";
		document.wireless_basic.wifihiddenButton.value = 0;
	}
	else {
		alert("如果启用了MBSSID或DBDC，则相同WiFi卡中的所有Wi-Fi接口将被打开。");
		document.wireless_basic.WiFiButton.value = "关闭WIFI";
		document.wireless_basic.wifihiddenButton.value = 1;
	}
}

function setChange(c){
	changed = c;
}

var WPAAlgorithms;
function onWPAAlgorithmsClick(type)
{
	if(type == 0 && WPAAlgorithms == "TKIP") return;
	if(type == 1 && WPAAlgorithms == "AES") return;
	if(type == 2 && WPAAlgorithms == "TKIPAES") return;
	setChange(1);
}

</script>

<body onLoad="initValue()">
<div class="long_ndiv">
<table class="body"><tr><td>

<h1 id="basicTitle">无线基础设置 </h1>
<p id="basicIntroduction"> 您可以配置通信的无线设置的最小数量，例如网络名称（SSID）和通道。 接入点只能通过最小设置项进行设置。 </p>
<hr />

<form method=post name=wireless_basic action="/cgi-bin/wireless.cgi">
<input type=hidden name=page value=basic>
<input type=hidden name=wlan_conf value="2860">


<!-- MBSSID Setting -->
<table width="540" border="1" cellspacing="1" cellpadding="3" bordercolor="#9BABBD">
  <tr>
    <td class="title" colspan="2" id="basicWirelessNet">无线网络</td>
  </tr>
  <tr style="display:none">
    <td class="head" id="aboutDriverVersion">驱动版本</td>
    <td><!--#exec cmd="web 2860 wifi version"--></td>
  </tr>
  <tr style="display:none">
    <td class="head" id="basicRadioButton">射频 开/关</td>
    <td>
      <input type="button" name="radioButton" id="radioButton" style="{width:120px;}" value="开启无线"
      onClick="if (this.value.indexOf('关闭') >= 0) RadioStatusChange(1); else RadioStatusChange(0); submit_form(this, 3, submit_buttons, null);"> &nbsp; &nbsp;
      <input type=hidden name=radiohiddenButton value="2">
    </td>
  </tr>
  <tr>
    <td class="head" id="basicWiFiButton">开/关 WiFi</td>
    <td>
      <input type="button" name="WiFiButton" id="WiFiButton" style="{width:120px;}" value="开启WIFI"
      onClick="if (this.value.indexOf('关闭') >= 0) WiFiStatusChange(1); else WiFiStatusChange(0); submit_form(this, 60, submit_buttons, null);"> &nbsp; &nbsp;
      <input type=hidden name=wifihiddenButton value="2">
    </td>
  </tr>
  <tr>
    <td class="head" id="basicSSID">网络名称(SSID)</td>
    <td id="">
      <input type=text id="mssid_0" name="mssid_0" size=18 maxlength=32 value="">
      &nbsp;&nbsp;<font id="basicHSSID0">隐藏</font>
      <input type=checkbox id="hssid_0" name="hssid_0" value="0">
      &nbsp;&nbsp; <!-- <font id="basicIsolatedSSID0">隔离</font>
      <input type=checkbox id="isolated_ssid_0" name="isolated_ssid_0" value="0"> -->
    </td>
  </tr>
  <tr id="div_hssid1">
    <td class="head">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font id="basicMSSID1">Multiple SSID</font>1</td>
    <td>
      <input type=text id="mssid_1" name="mssid_1" size=18 maxlength=32 value="">
      &nbsp;&nbsp;<font id="basicHSSID1">Hidden</font>
      <input type=checkbox id="hssid_1" name="hssid_1" value="1">
      &nbsp;&nbsp;<font id="basicIsolatedSSID1">Isolated</font>
      <input type=checkbox id="isolated_ssid_1" name="isolated_ssid_1" value="1">
    </td>
  </tr>
  <tr id="div_hssid2">
    <td class="head">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font id="basicMSSID2">Multiple SSID</font>2</td>
    <td>
      <input type=text id="mssid_2" name="mssid_2" size=18 maxlength=32 value="">
      &nbsp;&nbsp;<font id="basicHSSID2">Hidden</font>
      <input type=checkbox id="hssid_2" name="hssid_2" value="2">
      &nbsp;&nbsp;<font id="basicIsolatedSSID2">Isolated</font>
      <input type=checkbox id="isolated_ssid_2" name="isolated_ssid_2" value="2">
    </td>
  </tr>
  <tr id="div_hssid3">
    <td class="head">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font id="basicMSSID3">Multiple SSID</font>3</td>
    <td><input type=text id="mssid_3" name="mssid_3" size=18 maxlength=32 value="">
      &nbsp;&nbsp;<font id="basicHSSID3">Hidden</font>
      <input type=checkbox id="hssid_3" name="hssid_3" value="3">
      &nbsp;&nbsp;<font id="basicIsolatedSSID3">Isolated</font>
      <input type=checkbox id="isolated_ssid_3" name="isolated_ssid_3" value="3">
    </td>
  </tr>
  <tr id="div_hssid4" style="display:none">
    <td class="head">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font id="basicMSSID4">Multiple SSID</font>4</td>
    <td><input type=text id="mssid_4" name="mssid_4" size=18 maxlength=32 value="">
      &nbsp;&nbsp;<font id="basicHSSID4">Hidden</font>
      <input type=checkbox id="hssid_4" name="hssid_4" value="4">
      &nbsp;&nbsp;<font id="basicIsolatedSSID4">Isolated</font>
      <input type=checkbox id="isolated_ssid_4" name="isolated_ssid_4" value="4">
    </td>
  </tr>
  <tr id="div_hssid5" style="display:none">
    <td class="head">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font id="basicMSSID5">Multiple SSID</font>5</td>
    <td><input type=text id="mssid_5" name="mssid_5" size=18 maxlength=32 value="">
      &nbsp;&nbsp;<font id="basicHSSID5">Hidden</font>
      <input type=checkbox id="hssid_5" name="hssid_5" value="5">
      &nbsp;&nbsp;<font id="basicIsolatedSSID5">Isolated</font>
      <input type=checkbox id="isolated_ssid_5" name="isolated_ssid_5" value="5">
    </td>
  </tr>
  <tr id="div_hssid6" style="display:none">
    <td class="head">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font id="basicMSSID6">Multiple SSID</font>6</td>
    <td><input type=text id="mssid_6" name="mssid_6" size=18 maxlength=32 value="">
      &nbsp;&nbsp;<font id="basicHSSID6">Hidden</font>
      <input type=checkbox id="hssid_6" name="hssid_6" value="6">
      &nbsp;&nbsp;<font id="basicIsolatedSSID6">Isolated</font>
      <input type=checkbox id="isolated_ssid_6" name="isolated_ssid_6" value="6">
    </td>
  </tr>
  <tr id="div_hssid7" style="display:none">
    <td class="head">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font id="basicMSSID7">Multiple SSID</font>7</td>
    <td><input type=text id="mssid_7" name="mssid_7" size=18 maxlength=32 value="">
      &nbsp;&nbsp;<font id="basicHSSID7">Hidden</font>
      <input type=checkbox id="hssid_7" name="hssid_7" value="7">
      &nbsp;&nbsp;<font id="basicIsolatedSSID7">Isolated</font>
      <input type=checkbox id="isolated_ssid_7" name="isolated_ssid_7" value="7">
    </td>
  </tr>
  <tr id="div_hssid8" style="display:none">
    <td class="head">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font id="basicMSSID8">Multiple SSID</font>8</td>
    <td><input type=text id="mssid_8" name="mssid_8" size=18 maxlength=32 value="">
      &nbsp;&nbsp;<font id="basicHSSID8">Hidden</font>
      <input type=checkbox id="hssid_8" name="hssid_8" value="8">
      &nbsp;&nbsp;<font id="basicIsolatedSSID8">Isolated</font>
      <input type=checkbox id="isolated_ssid_8" name="isolated_ssid_8" value="8">
    </td>
  </tr>
  <tr id="div_hssid9" style="display:none">
    <td class="head">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font id="basicMSSID9">Multiple SSID</font>9</td>
    <td><input type=text id="mssid_9" name="mssid_9" size=18 maxlength=32 value="">
      &nbsp;&nbsp;<font id="basicHSSID9">Hidden</font>
      <input type=checkbox id="hssid_9" name="hssid_9" value="9">
      &nbsp;&nbsp;<font id="basicIsolatedSSID9">Isolated</font>
      <input type=checkbox id="isolated_ssid_9" name="isolated_ssid_9" value="9">
    </td>
  </tr>
  <tr id="div_hssid10" style="display:none">
    <td class="head">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font id="basicMSSID10">Multiple SSID</font>10</td>
    <td><input type=text id="mssid_10" name="mssid_10" size=18 maxlength=32 value="">
      &nbsp;&nbsp;<font id="basicHSSID10">Hidden</font>
      <input type=checkbox id="hssid_10" name="hssid_10" value="10">
      &nbsp;&nbsp;<font id="basicIsolatedSSID10">Isolated</font>
      <input type=checkbox id="isolated_ssid_10" name="isolated_ssid_10" value="10">
    </td>
  </tr>
  <tr id="div_hssid11" style="display:none">
    <td class="head">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font id="basicMSSID11">Multiple SSID</font>11</td>
    <td><input type=text id="mssid_11" name="mssid_11" size=18 maxlength=32 value="">
      &nbsp;&nbsp;<font id="basicHSSID11">Hidden</font>
      <input type=checkbox id="hssid_11" name="hssid_11" value="11">
      &nbsp;&nbsp;<font id="basicIsolatedSSID11">Isolated</font>
      <input type=checkbox id="isolated_ssid_11" name="isolated_ssid_11" value="11">
    </td>
  </tr>
  <tr id="div_hssid12" style="display:none">
    <td class="head">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font id="basicMSSID12">Multiple SSID</font>12</td>
    <td><input type=text id="mssid_12" name="mssid_12" size=18 maxlength=32 value="">
      &nbsp;&nbsp;<font id="basicHSSID12">Hidden</font>
      <input type=checkbox id="hssid_12" name="hssid_12" value="12">
      &nbsp;&nbsp;<font id="basicIsolatedSSID12">Isolated</font>
      <input type=checkbox id="isolated_ssid_12" name="isolated_ssid_12" value="12">
    </td>
  </tr>
  <tr id="div_hssid13" style="display:none">
    <td class="head">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font id="basicMSSID13">Multiple SSID</font>13</td>
    <td><input type=text id="mssid_13" name="mssid_13" size=18 maxlength=32 value="">
      &nbsp;&nbsp;<font id="basicHSSID13">Hidden</font>
      <input type=checkbox id="hssid_13" name="hssid_13" value="13">
      &nbsp;&nbsp;<font id="basicIsolatedSSID13">Isolated</font>
      <input type=checkbox id="isolated_ssid_13" name="isolated_ssid_13" value="13">
    </td>
  </tr>
  <tr id="div_hssid14" style="display:none">
    <td class="head">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font id="basicMSSID14">Multiple SSID</font>14</td>
    <td><input type=text id="mssid_14" name="mssid_14" size=18 maxlength=32 value="">
      &nbsp;&nbsp;<font id="basicHSSID14">Hidden</font>
      <input type=checkbox id="hssid_14" name="hssid_14" value="14">
      &nbsp;&nbsp;<font id="basicIsolatedSSID14">Isolated</font>
      <input type=checkbox id="isolated_ssid_14" name="isolated_ssid_14" value="14">
    </td>
  </tr>
  <tr id="div_hssid15" style="display:none">
    <td class="head">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font id="basicMSSID15">Multiple SSID</font>15</td>
    <td><input type=text id="mssid_15" name="mssid_15" size=18 maxlength=32 value="">
      &nbsp;&nbsp;<font id="basicHSSID15">Hidden</font>
      <input type=checkbox id="hssid_15" name="hssid_15" value="15">
      &nbsp;&nbsp;<font id="basicIsolatedSSID15">Isolated</font>
      <input type=checkbox id="isolated_ssid_15" name="isolated_ssid_15" value="15">
    </td>
  </tr>
  <tr id="div_dbdc_mode" >
    <td class="head" id="DBDCEnable">DBDC</td>
    <td>
      <input type=radio name="DBDCEnabled" value="1" onClick="OnDBDCChanged()"><font id="DBDCEnabledFont">开启&nbsp;</font>
      <input type=radio name="DBDCEnabled" value="0" checked onClick="OnDBDCChanged()"><font id="DBDCEnabledFone">关闭</font>
    </td>
  </tr>
</table>


<!-- ---------------------  Per SSID Options  --------------------- -->
<table width="540" border="1" cellspacing="1" cellpadding="3" bordercolor="#9BABBD">
<tbody>
  <tr id="div_per_ssid">
    <td class="title" colspan="2" name="secureSelectSSID" id="secureSelectSSID">根据SSID选项</td>
  </tr>
  <tr id="div_ssid_choice">
    <td class="head" id="secureSSIDChoice">SSID 选择</td>
    <td>
      <select name="ssidIndex" size="1" onchange="OnMBSSIDChanged()">
	<!-- ....Javascript will update options.... -->
      </select>
    </td>
  </tr>
  <tr>
    <td class="head" id="basicNetMode">网络模式</td>
    <td>
      <select name="wirelessmode" id="wirelessmode" size="1" onChange="wirelessModeChange()">
        <!-- ....Javascript will update topions....
        <option value=0>11b/g mixed mode</option>
        <option value=1>11b only</option>
        <option value=4>11g only</option>
        <option value=9>11b/g/n mixed mode</option>
	<option value=6>11n only(2.4G)</option>
	-->
      </select>
    </td>
  </tr>
  <tr id="div_11a_channel" name="div_11a_channel">
    <td class="head"><font id="basicFreqA">频率 (信道)</font></td>
    <td>
      <select id="sz11aChannel" name="sz11aChannel" size="1" onChange="ChOnChange()">
	<option value=0 id="basicFreqAAuto">自动选择</option>
	<option value=36 >5180MHz (Channel 36)</option><option value=40 >5200MHz (Channel 40)</option><option value=44 >5220MHz (Channel 44)</option><option value=48 >5240MHz (Channel 48)</option><option value=52 >5260MHz (Channel 52)</option><option value=56 >5280MHz (Channel 56)</option><option value=60 >5300MHz (Channel 60)</option><option value=64 >5320MHz (Channel 64)</option><option value=100 >5500MHz (Channel 100)</option><option value=104 >5520MHz (Channel 104)</option><option value=108 >5540MHz (Channel 108)</option><option value=112 >5560MHz (Channel 112)</option><option value=116 >5580MHz (Channel 116)</option><option value=120 >5600MHz (Channel 120)</option><option value=124 >5620MHz (Channel 124)</option><option value=128 >5640MHz (Channel 128)</option><option value=132 >5660MHz (Channel 132)</option><option value=136 >5680MHz (Channel 136)</option><option value=140 >5700MHz (Channel 140)</option><option value=149 >5745MHz (Channel 149)</option><option value=153 >5765MHz (Channel 153)</option><option value=157 >5785MHz (Channel 157)</option><option value=161 >5805MHz (Channel 161)</option><option value=165 >5825MHz (Channel 165)</option><option value=169 >5845MHz (Channel 169)</option><option value=173 >5865MHz (Channel 173)</option>
      </select>
    </td>
  </tr>
  <tr id="div_11b_channel" name="div_11b_channel">
    <td class="head"><font id="basicFreqB">频率 (信道)</font></td>
    <td>
      <select id="sz11bChannel" name="sz11bChannel" size="1" onChange="ChOnChange()">
	<option value=0 id="basicFreqBAuto">自动选择</option>
	<option value=1 >2412MHz (Channel 1)</option><option value=2 >2417MHz (Channel 2)</option><option value=3 >2422MHz (Channel 3)</option><option value=4 >2427MHz (Channel 4)</option><option value=5 >2432MHz (Channel 5)</option><option value=6 >2437MHz (Channel 6)</option><option value=7 >2442MHz (Channel 7)</option><option value=8 >2447MHz (Channel 8)</option><option value=9 >2452MHz (Channel 9)</option><option value=10 >2457MHz (Channel 10)</option><option value=11 >2462MHz (Channel 11)</option><option value=12 >2467MHz (Channel 12)</option><option value=13 >2472MHz (Channel 13)</option>
      </select>
    </td>
  </tr>
  <tr id="div_11g_channel" name="div_11g_channel">
    <td class="head"><font id="basicFreqG">频率 (信道)</font></td>
    <td>
      <select id="sz11gChannel" name="sz11gChannel" size="1" onChange="ChOnChange()">
	<option value=0 id="basicFreqGAuto">自动选择</option>
	<!-- <option value=1 >2412MHz (Channel 1)</option><option value=2 >2417MHz (Channel 2)</option><option value=3 >2422MHz (Channel 3)</option><option value=4 >2427MHz (Channel 4)</option><option value=5 >2432MHz (Channel 5)</option><option value=6 >2437MHz (Channel 6)</option><option value=7 >2442MHz (Channel 7)</option><option value=8 >2447MHz (Channel 8)</option><option value=9 >2452MHz (Channel 9)</option><option value=10 >2457MHz (Channel 10)</option><option value=11 >2462MHz (Channel 11)</option><option value=12 >2467MHz (Channel 12)</option><option value=13 >2472MHz (Channel 13)</option> -->
	<!--#exec cmd="web 2860 wifi getGChannels"-->
      </select>
    </td>
  </tr>
</tbody></table>

<hr />

<!-- ---------------------  Basic Option  --------------------- -->
<table width="540" border="1" cellspacing="1" cellpadding="3" bordercolor="#9BABBD" >
  <tr>
    <td class="title" colspan="2" id="basicOption">基本 选项</td>
  </tr>
  <tr id="div_abg_rate" style="display:none;">
    <td class="head"><font id="basicRate">速率</font></td>
    <td>
      <select name="abg_rate" size="1">
      </select>
    </td>
  </tr>
  <tr id="div_broadcastssid">
    <td class="head" id="basicBroadcastSSID">广播网络名称（SSID）</td>
    <td>
      <input type=radio name=broadcastssid value="1" checked onClick="switch_hidden_ssid()"><font id="basicBroadcastSSIDEnable">开启&nbsp;</font>
      <input type=radio name=broadcastssid value="0" onClick="switch_hidden_ssid()"><font id="basicBroadcastSSIDDisable">关闭</font>
    </td>
  </tr>
  <tr id="div_apisolated" style="display:none;">
    <td class="head" id="basicApIsolated">AP 隔离</td>
    <td>
      <input type=radio name=apisolated value="1" onClick="switch_isolated_ssid()"><font id="basicApIsolatedEnable">开启&nbsp;</font>
      <input type=radio name=apisolated value="0" checked onClick="switch_isolated_ssid()"><font id="basicApIsolatedDisable">关闭</font>
    </td>
  </tr>
  <tr id="div_mbssidapisolated" style="display:none;">
    <td class="head" id="basicMBSSIDApIsolated">MBSSID AP 隔离</td>
    <td>
      <input type=radio name=mbssidapisolated value="1"><font id="basicMBSSIDApIsolatedEnable">开启&nbsp;</font>
      <input type=radio name=mbssidapisolated value="0" checked><font id="basicMBSSIDApIsolatedDisable">关闭</font>
    </td>
  </tr>
  <tr style="display:none;">
    <td class="head" id="basicBSSID" >BSSID</td>
    <td>&nbsp;&nbsp;<!--#exec cmd="web 2860 sys wifiMacAddr"-->
  </tr>
</table>


<!-- ---------------------  HT Option  --------------------- -->
<table id="div_11n" name="div_11n" width="540" border="1" cellspacing="1" cellpadding="3" bordercolor="#9BABBD" style="display:none">
  <tr>
    <td class="title" colspan="2" id="basicHTPhyMode">高吞吐量实体模块</td>
  </tr>
  <tr style="display:none">
    <td class="head" id="basicHTOPMode">运行模式</td>
    <td>
      <input type=radio name=n_mode value="0" checked><font id="basicHTMixed">混合模式&nbsp;</font>
      <input type=radio name=n_mode value="1">Green Field
    </td>
  </tr>
  <tr>
    <td class="head" id="basicHTChannelBW">频道带宽</td>
    <td>
      <input type=radio name=n_bandwidth value="0" onClick="ChBwOnClick()" checked>20&nbsp;
      <input type=radio name=n_bandwidth value="1" onClick="ChBwOnClick()">20/40&nbsp;
	  <input type=radio name=n_bandwidth value="2" onClick="ChBwOnClick()">40
    </td>
  </tr>
  <tr style="display:none">
    <td class="head" id="basicHTGI">保护间隔</td>
    <td>
      <input type=radio name=n_gi value="0" checked><font id="basicHTLongGI">长时&nbsp;</font>
      <input type=radio name=n_gi value="1"><font id="basicHTAutoGI">自动</font>
    </td>
  </tr>
  <tr style="display:none">
    <td class="head">MCS</td>
    <td>
      <select name="n_mcs" id="n_mcs" size="1">
	<option value="0">0</option>
	<option value="1">1</option>
	<option value="2">2</option>
	<option value="3">3</option>
	<option value="4">4</option>
	<option value="5">5</option>
	<option value="6">6</option>
	<option value="7">7</option>
	<!--
	<option value="8">8</option>
	<option value="9">9</option>
	<option value="10">10</option>
	<option value="11">11</option>
	<option value="12">12</option>
	<option value="13">13</option>
	<option value="14">14</option>
	<option value="15">15</option>
	<option value="32">32</option>
	<option value="33" selected id="basicHTAutoMCS">自动</option>
	-->
      </select>
    </td>
  </tr>
  <tr style="display:none">
    <td class="head" id="basicHTRDG">反转方向权限(RDG)</td>
    <td>
      <input type=radio name=n_rdg value="0" checked><font id="basicHTRDGDisable">关闭&nbsp;</font>
      <input type=radio name=n_rdg value="1"><font id="basicHTRDGEnable">开启</font>
    </td>
  </tr>
  <tr name="div_extension_channel" id="div_extension_channel" style="display:none">
    <td class="head" id="basicHTExtChannel">延伸频道</td>
    <td>
      <select id="n_extcha" name="n_extcha" size="1">
	<option value=1 selected>2412MHz (信道 1)</option>
      </select>
    </td>
  </tr>
  <tr style="display:none">
    <td class="head" id="basicHTSTBC">STBC</td>
    <td>
      <input type=radio name=n_stbc value="0" checked><font id="basicHTSTBCDisable">关闭&nbsp;</font>
      <input type=radio name=n_stbc value="1"><font id="basicHTSTBCEnable">开启</font>
    </td>
  </tr>
  <tr style="display:none">
    <td class="head" id="basicHTAMSDU">聚合MAC业务数据单元（A-MSDU）</td>
    <td>
      <input type=radio name=n_amsdu value="0" checked><font id="basicHTAMSDUDisable">关闭&nbsp;</font>
      <input type=radio name=n_amsdu value="1"><font id="basicHTAMSDUEnable">开启</font>
    </td>
  </tr>
  <tr style="display:none">
    <td class="head" id="basicHTAddBA">自动单一区块确认</td>
    <td>
      <input type=radio name=n_autoba value="0" checked><font id="basicHTAddBADisable">关闭&nbsp;</font>
      <input type=radio name=n_autoba value="1"><font id="basicHTAddBAEnable">开启</font>
    </td>
  </tr>
  <tr style="display:none">
    <td class="head" id="basicHTDelBA">拒绝单一区块确认要求</td>
    <td>
      <input type=radio name=n_badecline value="0" checked><font id="basicHTDelBADisable">关闭&nbsp;</font>
      <input type=radio name=n_badecline value="1"><font id="basicHTDelBAEnable">开启</font>
    </td>
  </tr>
  <tr style="display:none">
    <td class="head" id="basicHTAllowTKIP">HT Disallow TKIP</td>
    <td>
      <input type=radio name=n_disallow_tkip value="0" checked><font id="basicHTAllowTKIPDisable">关闭&nbsp;</font>
      <input type=radio name=n_disallow_tkip value="1"><font id="basicHTAllowTKIPEnable">开启</font>
    </td>
  </tr>
  <tr id="div_2040_coexit" style="display:none">
    <td class="head" id="basic2040CoExit">20/40 共存</td>
    <td>
      <input type=radio name=n_2040_coexit value="0" checked><font id="basic2040CoExitDisable">关闭&nbsp;</font>
      <input type=radio name=n_2040_coexit value="1"><font id="basic2040CoExitEnable">开启</font>
    </td>
  </tr>
  <tr style="display:none">
    <td class="head" id="basicHTLDPC">HT LDPC</td>
    <td>
      <input type=radio name=n_ldpc value="0" checked><font id="basicHtLdpc">关闭&nbsp;</font>
      <input type=radio name=n_ldpc value="1"><font id="basicHtLdpc">开启</font>
    </td>
  </tr>
</table>

<!-- VHT Option -->
<table id="div_11vht" name="div_11vht" width="540" border="1" cellspacing="1" cellpadding="3" bordercolor="#9BABBD" style="display:none">
  <tr>
    <td class="title" colspan="2" id="basicVHTOption">VHT 选项</td>
  </tr>
  <tr id="div_vht_bw">
    <td class="head" id="basicVhtBw">VHT 带宽</td>
    <td>
      <input type=radio name=vht_bandwidth value="0" onClick="VHTBWonClick()" checked>20/40&nbsp;
      <input type=radio name=vht_bandwidth value="1" onClick="VHTBWonClick()">80
      <input type=radio name=vht_bandwidth value="2" onClick="VHTBWonClick()">160
      <input type=radio name=vht_bandwidth value="3" onClick="VHTBWonClick()">80+80
    </td>
  </tr>
  <tr id="div_vht_2nd_11a_channel" name="div_vht_2nd_11a_channel">
    <td class="head"><font id="basicFreqA">第二频率 (信道)</font></td>
    <td>
      <select id="vht2nd11aChannel" name="vht2nd11aChannel" size="1">
      </select>
    </td>
  </tr>
  <tr>
    <td class="head" id="basicVhtStbc">VHT STBC</td>
    <td>
      <input type=radio name=vht_stbc value="0" checked><font id="basicVhtStbcD">关闭&nbsp;</font>
      <input type=radio name=vht_stbc value="1"><font id="basicVhtStbcE">开启</font>
    </td>
  </tr>
  <tr>
    <td class="head" id="basicVhtSgi">VHT 短保护间隔</td>
    <td>
      <input type=radio name=vht_sgi value="0" checked><font id="basicVhtSgiD">关闭&nbsp;</font>
      <input type=radio name=vht_sgi value="1"><font id="basicVhtSgiE">开启</font>
    </td>
  </tr>
  <tr>
    <td class="head" id="basicVhtBwSignal">VHT BW Signaling</td>
    <td>
      <input type=radio name=vht_bw_signal value="0" checked><font id="basicVhtBwSignalD">关闭&nbsp;</font>
      <input type=radio name=vht_bw_signal value="1"><font id="basicVhtBwSignalS">静态的</font>
      <input type=radio name=vht_bw_signal value="2"><font id="basicVhtBwSignalD">动态的</font>
    </td>
  </tr>
  <tr>
    <td class="head" id="basicVHTLDPC">VHT LDPC</td>
    <td>
      <input type=radio name=vht_ldpc value="0" checked><font id="basicVhtLdpcD">关闭&nbsp;</font>
      <input type=radio name=vht_ldpc value="1"><font id="basicVhtLdpcE">开启</font>
    </td>
  </tr>
</table>

<table id="div_11n_plugfest" name="div_11n_plugfest" width="540" border="1" cellspacing="1" cellpadding="3" bordercolor="#9BABBD" style="display:none">
  <tr>
    <td class="title" colspan="2" id="basicOther">其它</td>
  </tr>
  <tr>
    <td class="head" id="basicHTTxStream">高吞吐量传送数据流</td>
    <td>
      <select id="tx_stream" name="tx_stream" size="1" onChange="changeTxStream()">
	<option value =1>1</option>
      </select>
    </td>
  </tr>
  <tr>
    <td class="head" id="basicHTRxStream">高吞吐量接收数据流</td>
    <td>
      <select id="rx_stream" name="rx_stream" size="1">
	<option value = 1>1</option>
      </select>
    </td>
  </tr>
</table>

<!-- copy from security.shtml,  -->
<table border="1" bordercolor="#9babbd" cellpadding="3" cellspacing="1" hspace="2" vspace="2" width="540">
  <tbody><tr>

    <td class="title" colspan="2"> <span id="sp_title">安全原则 </span></td>
  </tr>
  <tr id="div_security_infra_mode" name="div_security_infra_mode">
    <td class="head" id="secureSecureMode">安全模式</td>
    <td>
      <select name="security_mode" id="security_mode" size="1" onchange="securityMode(1)">
			<!-- ....Javascript will update options.... -->
      </select>

    </td>
  </tr>
</tbody></table>
<br>

<!-- WEP -->
<table id="div_wep" name="div_wep" border="1" bordercolor="#9babbd" cellpadding="3" cellspacing="1" hspace="2" vspace="2" width="540" style="visibility: hidden;">
  <tbody><tr>
    <td class="title" colspan="4" id="secureWEP">有线等效保密（WEP）</td>
  </tr>

  <tr>
    <td class="head" colspan="2" id="secureWEPDefaultKey">默认密钥</td>
    <td colspan="2">
      <select name="wep_default_key" id="wep_default_key" size="1" onchange="setChange(1)">
	<option value="1" id="secureWEPDefaultKey1">密钥 1</option>
	<option value="2" id="secureWEPDefaultKey2">密钥 2</option>
	<option value="3" id="secureWEPDefaultKey3">密钥 3</option>
	<option value="4" id="secureWEPDefaultKey4">密钥 4</option>
      </select>
    </td>
  </tr>

  <tr>
    <td class="head1" rowspan="4" id="secureWEPKey">WEP 密钥</td>
    <td class="head2" id="secureWEPKey1">WEP 密钥 1 :</td>
    <td><input name="wep_key_1" id="WEP1" maxlength="26" value="" onKeyUp="setChange(1)"></td>
    <td><select id="WEP1Select" name="WEP1Select" onchange="setChange(1)">
		<option value="1">ASCII字符</option>
		<option value="0">16进制</option>
		</select></td>
  </tr>

  <tr>
    <td class="head2" id="secureWEPKey2">WEP 密钥 2 : </td>
    <td><input name="wep_key_2" id="WEP2" maxlength="26" value="" onKeyUp="setChange(1)"></td>
    <td><select id="WEP2Select" name="WEP2Select" onchange="setChange(1)">
		<option value="1">ASCII字符</option>
		<option value="0">16进制</option>
		</select></td>
  </tr>
  <tr>
    <td class="head2" id="secureWEPKey3">WEP 密钥 3 : </td>
    <td><input name="wep_key_3" id="WEP3" maxlength="26" value="" onKeyUp="setChange(1)"></td>
    <td><select id="WEP3Select" name="WEP3Select" onchange="setChange(1)">
		<option value="1">ASCII字符</option>
		<option value="0">16进制</option>
		</select></td>
  </tr>
  <tr>
    <td class="head2" id="secureWEPKey4">WEP 密钥 4 : </td>
    <td><input name="wep_key_4" id="WEP4" maxlength="26" value="" onKeyUp="setChange(1)"></td>
    <td><select id="WEP4Select" name="WEP4Select" onchange="setChange(1)">
		<option value="1">ASCII字符</option>
		<option value="0">16进制</option>
		</select></td>
  </tr>

</tbody></table>

<!-- WPA -->
<table id="div_wpa" name="div_wpa" border="1" bordercolor="#9babbd" cellpadding="3" cellspacing="1" hspace="2" vspace="2" width="540" style="visibility: hidden;">

  <tbody><tr>
    <td class="title" colspan="2" id="secreWPA">WPA</td>
  </tr>
  <tr id="div_wpa_algorithms" name="div_wpa_algorithms" style="visibility: hidden;">
    <td class="head" id="secureWPAAlgorithm">WPA 算法</td>
    <td>
      <input name="cipher" id="cipher" value="0" type="radio" onClick="onWPAAlgorithmsClick(0)">TKIP &nbsp;
      <input name="cipher" id="cipher" value="1" type="radio" onClick="onWPAAlgorithmsClick(1)">AES &nbsp;
      <input name="cipher" id="cipher" value="2" type="radio" onClick="onWPAAlgorithmsClick(2)">TKIPAES &nbsp;
    </td>
  </tr>
  <tr id="wpa_passphrase" name="wpa_passphrase" style="visibility: hidden;">
    <td class="head" id="secureWPAPassPhrase">密钥</td>
    <td>
      <input name="passphrase" id="passphrase" size="28" maxlength="64" value="" onKeyUp="setChange(1)">
    </td>
  </tr>

  <tr id="wpa_key_renewal_interval" name="wpa_key_renewal_interval" style="visibility: hidden;">
    <td class="head" id="secureWPAKeyRenewInterval">密钥更新周期</td>
    <td>
      <input name="keyRenewalInterval" id="keyRenewalInterval" size="6" maxlength="7" value="3600" onKeyUp="setChange(1)"> 秒 &nbsp;&nbsp;(0 ~ 4194303)
    </td>
  </tr>

  <tr id="wpa_PMK_Cache_Period" name="wpa_PMK_Cache_Period" style="visibility: hidden;">
    <td class="head" id="secureWPAPMKCachePeriod">成对主钥缓存周期</td>
    <td>
      <input name="PMKCachePeriod" id="PMKCachePeriod" size="4" maxlength="4" value="" onKeyUp="setChange(1)"> 分
    </td>
  </tr>

  <tr id="wpa_preAuthentication" name="wpa_preAuthentication" style="visibility: hidden;">
    <td class="head" id="secureWPAPreAuth">预认证</td>
    <td>
      <input name="PreAuthentication" id="PreAuthentication" value="0" type="radio" onClick="onPreAuthenticationClick(0)"><font id="secureWPAPreAuthDisable">关闭 &nbsp;</font>
      <input name="PreAuthentication" id="PreAuthentication" value="1" type="radio" onClick="onPreAuthenticationClick(1)"><font id="secureWPAPreAuthEnable">开启 &nbsp;</font>
    </td>
  </tr>
</tbody></table>


<br />

<table width = "540" border = "0" cellpadding = "2" cellspacing = "1">
  <tr align="center">
    <td>
      <input type="button" style="{width:120px;}" value="应用" id="basicApply" onClick="submit_form(this, 8, submit_buttons, CheckValue)"> &nbsp; &nbsp;
      <input type=reset  style="{width:120px;}" value="取消" id="basicCancel" onClick="window.location.reload()">
    </td>
  </tr>
</table>
</form>
</td></tr>

<!-- =============================== Waiting info ================================== -->
<tr><td>
<table name="div_waiting_img" id="div_waiting_img" width="600" style="visibility: hidden;">
  <tr align="center"><td id="cooldown_time_text"></td></tr>
  <tr align="center">
    <td><img src="/graphics/ajax-loader.gif"></td>
  </tr>
</table>

</td></tr></table>
</div>
</body>
<head>
<meta http-equiv="Pragma" content="no-cache">
<meta http-equiv="Expires" content="-1">
</head>
</html>
